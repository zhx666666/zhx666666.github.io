<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git</title>
    <url>/2021/01/25/git/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="什么是版本控制"><a href="#什么是版本控制" class="headerlink" title="什么是版本控制"></a>什么是版本控制</h2><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>
<ul>
<li>实现跨区域多人协同开发</li>
<li>追踪和记载一个或者多个文件的历史记录</li>
<li>组织和保护你的源代码和文档</li>
<li>统计工作量</li>
<li>并行开发、提高开发效率</li>
<li>跟踪记录整个软件的开发过程</li>
<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>
</ul>
<p>简单说就是用于管理多人协同开发项目的技术。</p>
<p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p>
<p>无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205225231"></p>
<h5 id="多人开发就必须要使用版本控制！"><a href="#多人开发就必须要使用版本控制！" class="headerlink" title="多人开发就必须要使用版本控制！"></a>多人开发就必须要使用版本控制！</h5><h2 id="常见的版本控制工具"><a href="#常见的版本控制工具" class="headerlink" title="常见的版本控制工具"></a>常见的版本控制工具</h2><ul>
<li><strong>Git</strong></li>
<li><strong>SVN</strong>（Subversion）</li>
<li><strong>CVS</strong>（Concurrent Versions System）</li>
<li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li>
<li><strong>TFS</strong>（Team Foundation Server）</li>
<li>Visual Studio Online</li>
</ul>
<h2 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h2><p><strong>1、本地版本控制</strong></p>
<p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205225229"></p>
<p><strong>2、集中版本控制  SVN</strong></p>
<p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205225237"></p>
<p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p>
<p><strong>3、分布式版本控制 Git</strong></p>
<p>每个人都拥有全部的代码！安全隐患！</p>
<p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。不会因为服务器的损坏而丢失，每个用户的本地有远程仓库的备份</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205225230"></p>
<h2 id="Git与SVN的主要区别"><a href="#Git与SVN的主要区别" class="headerlink" title="Git与SVN的主要区别"></a>Git与SVN的主要区别</h2><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p>
<p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</p>
<h2 id="常用的Linux命令"><a href="#常用的Linux命令" class="headerlink" title="常用的Linux命令"></a>常用的Linux命令</h2><p>平时一定要多使用这些基础的命令！</p>
<p>1）、cd : 改变目录。</p>
<p>2）、cd . . 回退到上一个目录，直接cd进入默认目录</p>
<p>3）、pwd : 显示当前所在的目录路径。</p>
<p>4）、ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p>
<p>5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p>
<p>6）、rm:  删除一个文件, rm index.js 就会把index.js文件删除。</p>
<p>7）、mkdir:  新建一个目录,就是新建一个文件夹。</p>
<p>8）、rm -r :  删除一个文件夹, rm -r src 删除src目录</p>
<p>​            rm -rf /  切勿在Linux中尝试！删除电脑中全部文件！</p>
<p>9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p>
<p>10）、reset 重新初始化终端/清屏。</p>
<p>11）、clear 清屏。</p>
<p>12）、history 查看命令历史。</p>
<p>13）、help 帮助。</p>
<p>14）、exit 退出。</p>
<p>15）、#表示注释</p>
<h2 id="设置用户名与邮箱（用户标识，必要）"><a href="#设置用户名与邮箱（用户标识，必要）" class="headerlink" title="设置用户名与邮箱（用户标识，必要）"></a>设置用户名与邮箱（用户标识，必要）</h2><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p>
<ol>
<li>git config –global user.name “kuangshen”  #名称</li>
<li>git config –global user.email <a href="mailto:&#50;&#x34;&#x37;&#51;&#54;&#x37;&#52;&#x33;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#109;">&#50;&#x34;&#x37;&#51;&#54;&#x37;&#52;&#x33;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#109;</a>   #邮箱</li>
<li>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。</li>
</ol>
<h2 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205225234" alt="img"></p>
<ul>
<li>Workspace：工作区，就是你平时存放项目代码的地方</li>
<li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>
<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>
<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>
<li><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205225233" alt="img"><ul>
<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>
<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>
<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>
<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>
<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>
<li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>
</ul>
</li>
</ul>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>git的工作流程一般是这样的：</p>
<p>１、在工作目录中添加、修改文件；</p>
<p>２、将需要进行版本管理的文件放入暂存区域；</p>
<p>３、将暂存区域的文件提交到git仓库。</p>
<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205225235" alt="img"></p>
<h2 id="git中常用到的命令"><a href="#git中常用到的命令" class="headerlink" title="git中常用到的命令"></a>git中常用到的命令</h2><ul>
<li><p>git init:在当前的文件中创建git代码库也是,.git文件夹</p>
</li>
<li><p>git clone [url]:从远程仓库中下载一个项目和这个项目的修改历史</p>
</li>
<li><p>git add (.)表示所有:将当前工作区添加到缓存区中</p>
</li>
<li><p>git rm –cached [file]:将文件从缓存区中移除</p>
</li>
<li><p>git commit -m”提交信息”:提交缓存区中的文件,提交到本地仓库</p>
</li>
<li><p>git push origin 分支:表示从本地仓库推送到中央仓库</p>
</li>
<li><p>git branch:分支</p>
<ul>
<li><p>-d 删除分支</p>
</li>
<li><p>-a 显示所有的分支包括远程分支</p>
</li>
<li><p>[name]: 常见一个分支</p>
</li>
</ul>
</li>
<li><p>$ git checkout</p>
<ul>
<li><p>[branch]:分支切换</p>
</li>
<li><p>将缓存中的数据替换到工作区,相当于回滚</p>
</li>
<li><p>[-q] [<commit>] [–] <path>…而检出命令主要是覆盖工作区(如果<commit>不省略,也会替换暂存区中相应的文件).</p>
</li>
<li><p>-b创建</p>
</li>
</ul>
</li>
<li><p>git reset:将缓存中的索引进行清空</p>
</li>
<li><p>git merge [branch]:与指定的分支进行合并</p>
</li>
<li><p>git remote -v :显示所有远程仓库 </p>
</li>
<li><p>git pull将从远程指定的分支进行和当前分支进行合并</p>
<ul>
<li>fetch:下载到本地仓库</li>
<li>mereg: 合并分支</li>
</ul>
</li>
</ul>
<h2 id="git创建工作目录与常用指令"><a href="#git创建工作目录与常用指令" class="headerlink" title="git创建工作目录与常用指令"></a>git创建工作目录与常用指令</h2><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>
<p>日常使用只要记住下图6个命令：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205225236" alt="img"></p>
<h2 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h2><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p>
<p>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前目录新建一个Git代码库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure>
<p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p>
<h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [url]  <span class="comment"># https://gitee.com/kuangstudy/openclass.git</span></span></span><br></pre></td></tr></table></figure>
<p>2、去 gitee 或者 github 上克隆一个测试！</p>
<p>Git文件操作</p>
<h2 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>
<ul>
<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li>
<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li>
<li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li>
</ul>
<h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看指定文件状态</span></span><br><span class="line"><span class="attr">git</span> <span class="string">status [filename]</span></span><br><span class="line"><span class="comment">#查看所有文件状态</span></span><br><span class="line"><span class="attr">git</span> <span class="string">status</span></span><br><span class="line"><span class="comment"># git add .                  添加所有文件到暂存区</span></span><br><span class="line"><span class="comment"># git commit -m &quot;消息内容&quot;    提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br></pre></td></tr></table></figure>
<h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>
<p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p>
<ol>
<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>
<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li>
<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>
<li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>
<li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#为注释</span><br><span class="line">*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br><span class="line">!lib.txt     #但lib.txt除外</span><br><span class="line">&#x2F;temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br><span class="line">build&#x2F;       #忽略build&#x2F;目录下的所有文件</span><br><span class="line">doc&#x2F;*.txt    #会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.tx</span><br></pre></td></tr></table></figure>
<h2 id="说明：GIT分支"><a href="#说明：GIT分支" class="headerlink" title="说明：GIT分支"></a>说明：GIT分支</h2><p>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205225228" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205225232" alt="img"></p>
<h2 id="git分支中常用指令："><a href="#git分支中常用指令：" class="headerlink" title="git分支中常用指令："></a>git分支中常用指令：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并指定分支到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>maven</title>
    <url>/2021/01/25/maven/</url>
    <content><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="什么是maven"><a href="#什么是maven" class="headerlink" title="什么是maven"></a>什么是maven</h3><p>​    maven主要服务于基于java的项目构建 依赖管理和项目信息管理 ，无论是小型的开源项目 还是大型的企业级应用 无论是传统的瀑布式开发 ，还是流行的敏捷模式 Maven都是大显身手</p>
<h3 id="使用maven的步骤"><a href="#使用maven的步骤" class="headerlink" title="使用maven的步骤"></a>使用maven的步骤</h3><ol>
<li><p>从百度下载maven，最好是zip的因为解压就等于安装了</p>
</li>
<li><p>配置java环境变量path，因为maven执行的几个阶段需要jdk要执行(maven是java)</p>
</li>
<li><p>配置本地仓库,找到Maven的bin/setting.xml文件，来配置本地仓库的地址<localRepository>仓库地址</localRepository></p>
</li>
<li><p>配置maven下载的镜像地址,因为默认访问国外网站下载资源，比较慢，配置国内的镜像云例如 某云 某为…</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>idea整合maven,找到filles-&gt;settings-&gt;搜操maven,选择本地的maven, 仓库 以及maven 的配置文件</p>
</li>
</ol>
<h3 id="maven概念"><a href="#maven概念" class="headerlink" title="maven概念"></a>maven概念</h3><p>​    Maven作为一个构建工具，不仅能帮我们自动化构建，还能够抽象构建过程，提供构建任务实现;它跨平台，对外提供了一致的操作接口，这一切足以使它成为优秀的、流行的构建工具,Maven不仅是构建工具，还是一个依赖管理工具和项目管理工具，它提供了中央仓库，能帮我自动下载构件。</p>
<h3 id="Maven常用命令说明"><a href="#Maven常用命令说明" class="headerlink" title="Maven常用命令说明"></a>Maven常用命令说明</h3><p><strong>mvn clean</strong>：表示运行清理操作（会默认把target文件夹中的数据清理）。</p>
<p><strong>mvn clean compile</strong>：表示先运行清理之后运行编译，会将代码编译到target文件夹中。</p>
<p><strong>mvn clean test</strong>：运行清理和测试。</p>
<p><strong>mvn clean package</strong>：运行清理和打包。</p>
<p><strong>mvn clean install</strong>：运行清理和安装，会将打好的包安装到本地仓库中，以便其他的项目可以调用。</p>
<p><strong>mvn clean deploy</strong>：运行清理和发布（发布到私服上面）。</p>
<h3 id="maven坐标管理"><a href="#maven坐标管理" class="headerlink" title="maven坐标管理"></a>maven坐标管理</h3><ol>
<li><strong>groupId</strong>定义了项目属于哪个组，随意命名，比如谷歌公司的myapp项目，就取名为 org.ax.entity</li>
<li><strong>artifactId</strong>定义了当前Maven项目在组中唯一的ID,比如定义hello-world。（相当于组织下的模块）</li>
<li><strong>version</strong>指定了项目当前的版本0.0.1-SNAPSHOT,SNAPSHOT意为快照，说明该项目还处于开发中，是不稳定的。</li>
<li><strong>name</strong>元素生命了一个对于用户更为友好的项目名称，虽然这不是必须的，但还是推荐为每个POM声明name,以方便信息交流</li>
</ol>
<h3 id="依赖范围使用的标签的是scope来指定作用域"><a href="#依赖范围使用的标签的是scope来指定作用域" class="headerlink" title="依赖范围使用的标签的是scope来指定作用域"></a>依赖范围使用的标签的是scope来指定作用域</h3><ul>
<li><strong>compile</strong> 编译依赖范围。如果没有指定，就会默认使用该依赖范围,对于编译、测试、运行三种classpath都有效，部署到容器中也会生效</li>
<li><strong>provided</strong> 和<strong>compile</strong>项目比部署到容器中不会生效</li>
<li><strong>runtime</strong> 运行时会生效</li>
<li>**test **只在测试的时候会生效</li>
<li><strong>system</strong> 系统依赖范围 和provided依赖范围完全一致,使用system范围的依赖时必须通过systemPath元素显示地指定依赖文件的路径。由于此类依赖不是通过Maven仓库解析的，而且往往与本机系统绑定，可能构成构建的不可移植</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205223008.jpg"></p>
<h3 id="maven如何手动搭建maven项目"><a href="#maven如何手动搭建maven项目" class="headerlink" title="maven如何手动搭建maven项目"></a>maven如何手动搭建maven项目</h3><ol>
<li>创建一个文件夹里面创建两个文件一个是src用于编码文件，pom文件是放本地坐标和依赖的</li>
<li>在src创建两个文件夹一个是main主文件放开发文件 ,test放测试文件的，这两个文件夹里都有两个文件，java是放编码文件,resources是放资源文件(静态资源)</li>
<li>如何想打包的话就用mvn package 编译的 compile … 根据自己的需求来使用不同的命令来操作项目,<strong>前提是必须找到项目的根路径</strong> ,安装到仓库就可引用了</li>
</ol>
<h3 id="jupiter单元测试常用的注解"><a href="#jupiter单元测试常用的注解" class="headerlink" title="jupiter单元测试常用的注解"></a>jupiter单元测试常用的注解</h3><ul>
<li><pre><code class="java">@BeforeEach //会在test之前执行执行 BeforeEach于BeforeAll区别前者是修饰成员方法的，后面是修饰静态方法的
@AfterEach //会在test之后执行执行 AfterEach于AfterAll区别前者是修饰成员方法的，后面是修饰静态方法的
@Test //单元测试</code></pre>
</li>
</ul>
<h3 id="servlet的生命周"><a href="#servlet的生命周" class="headerlink" title="servlet的生命周"></a>servlet的生命周</h3><ol>
<li>init()启动容器的时候可以很据load-on-starup 参数进行选择性的，是在启动时初始化信息，还是在第一次访问页面的时候初始化信息</li>
<li>service()服务客户 容器会根据用户的请求方式调用doPost()或者doGet()</li>
<li>destory() 当停止容器的会调用destory来释放资源</li>
<li>init()和destory()只执行一遍</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/2021/01/25/mybatis/</url>
    <content><![CDATA[<h1 id="MyBatis-01"><a href="#MyBatis-01" class="headerlink" title="MyBatis-01"></a>MyBatis-01</h1><h2 id="什么是-MyBatis？"><a href="#什么是-MyBatis？" class="headerlink" title="什么是 MyBatis？"></a>什么是 MyBatis？</h2><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<h2 id="maven中引入依赖"><a href="#maven中引入依赖" class="headerlink" title="maven中引入依赖"></a>maven中引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="如何配置Mybatis"><a href="#如何配置Mybatis" class="headerlink" title="如何配置Mybatis"></a>如何配置Mybatis</h2><ul>
<li>settings是mapper文件的全局设置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        开启延迟加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        关闭立即加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!----&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        调用了默认的触发方法，由于lazyLoadTriggerMethods：</span></span><br><span class="line"><span class="comment">                    指定哪个对象的方法触发一次延迟加载。默认值：equals,clone,hashCode,toString--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        定义单个别名，使用时不区分大小写--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;typeAlias type=&quot;org.ax.entity.Student&quot; alias=&quot;student&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        定义多个别名不区分大小写,一下会将包中得所有类批量定义别名,别名就是类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.ax.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--        事物的提交方式:</span></span><br><span class="line"><span class="comment">                        JDBC:利用JDBC处理方式(commit rollback close)</span></span><br><span class="line"><span class="comment">                        MANAGER:将事务交由 其它组件去托管(spring,jobss) 默认会关闭 需要设置 &lt;property name=&quot;closeConnection&quot; value=&quot;false&quot;/&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--        数据源类型</span></span><br><span class="line"><span class="comment">                            UNPOOLED:传统的JDBC模式(每次访问，需要打开和关闭等操作，非常浪费性能)</span></span><br><span class="line"><span class="comment">                            POOLED:使用数据库连接池</span></span><br><span class="line"><span class="comment">                            JDNI:从tomcat中获取一个内置的数据库连接池（数据源）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--            配置数据库信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        加载映射文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;package name=&quot;org.ax.mapper&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/Student-Mapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/StudentClass-Mapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="如何映射sql语句"><a href="#如何映射sql语句" class="headerlink" title="如何映射sql语句"></a>如何映射sql语句</h2><ul>
<li><p>$和#区别</p>
<ul>
<li>${value}:不带’’</li>
<li>#{value}:带’’</li>
</ul>
</li>
<li><p>插入之后回写主键</p>
<ul>
<li><pre><code class="xml">在config文件中设置全局的
    &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;true&quot;/&gt;
也可以给指定的标签设置
    useGeneratedKeys=&quot;true&quot;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * 在标签上指定回写的属性用  keyProperty&#x3D;”属性名“ 或 keyColumn&#x3D;”属性名“ </span><br><span class="line"></span><br><span class="line">* 标签的sql通用属性</span><br><span class="line"></span><br><span class="line">  * resultType : 表示返回值的类型,如果是数据的话必须是数据的元素类型</span><br><span class="line">  * parameterType : 表示参数类型与Java中的参数类型类似</span><br><span class="line"></span><br><span class="line">* &#96;&#96;&#96;xml</span><br><span class="line">  表示片段 其它标签 可以通过 &lt;include refid&#x3D;&quot;片段Id&quot;&gt;&lt;&#x2F;include&gt;标签来引入片段</span><br><span class="line">  &lt;sql id&#x3D;&quot;片段Id&quot;&gt;</span><br><span class="line">          select * from student</span><br><span class="line">      &lt;&#x2F;sql&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  映射文件的路径或动态代理得全类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.ax.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span> </span><br></pre></td></tr></table></figure>
## 如何操作通过MyBatis操作数据库</code></pre>
</li>
</ul>
</li>
<li><h6 id="通多SqlSessionFactoryBuilder对象的build-参数可以是字符流也可以时字符流-方法构建一个SqlSessionFactory工厂-此对象必须时单例的-因为一个应用程序只有一个工厂-此工厂用完及丢"><a href="#通多SqlSessionFactoryBuilder对象的build-参数可以是字符流也可以时字符流-方法构建一个SqlSessionFactory工厂-此对象必须时单例的-因为一个应用程序只有一个工厂-此工厂用完及丢" class="headerlink" title="通多SqlSessionFactoryBuilder对象的build(参数可以是字符流也可以时字符流)方法构建一个SqlSessionFactory工厂(此对象必须时单例的),因为一个应用程序只有一个工厂   此工厂用完及丢"></a>通多SqlSessionFactoryBuilder对象的build(参数可以是字符流也可以时字符流)方法构建一个SqlSessionFactory工厂(<strong>此对象必须时单例的</strong>),因为一个应用程序只有一个工厂   此工厂用完及丢</h6><ul>
<li><p>```java<br>//<br>public class CreateFactory {</p>
<pre><code>private CreateFactory() &#123;
    try &#123;
        sqlSessionFactory=new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(path));
        sqlSession=sqlSessionFactory.openSession(isCommit);
    &#125; catch (IOException e) &#123;
        e.printStackTrace();
    &#125;
    System.out.println(Thread.currentThread().getName()+&quot;ok&quot;);
&#125;
private SqlSessionFactory sqlSessionFactory;
private SqlSession sqlSession;
private static String path;
private static boolean isCommit;

public void close()&#123;
    if(sqlSession!=null)&#123;
        sqlSession.close();
    &#125;
&#125;

/**
 * volatile禁止jvm重序
 *  重序: 一般1 2 3 偶尔 1 3 2
 *      1.分配内存空间
 *      2.执行构造方法,初始化对象
 *      3.把对象指定到分配空间中
 */

private volatile static CreateFactory lazyMan;

//        双重检测锁模式 懒汉式单例 DCL懒汉式
public static CreateFactory getInstance(String path2,boolean isCommit2)&#123;
    if(lazyMan==null)&#123;
        synchronized (CreateFactory.class)&#123;
            if(lazyMan==null)&#123;
                path=path2;
                isCommit=isCommit2;
                lazyMan=new CreateFactory();//不是一个原子性操作

                System.out.println(lazyMan);
                /**
                 * 1.分配内存空间
                 * 2.执行构造方法,初始化操作
                 * 3.把这个对象指向这个空间
                 */
            &#125;
        &#125;
    &#125;

    return lazyMan;
&#125;</code></pre>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class MyBatisUtil &#123;</span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;init...sqlSessionFactory&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(&quot;config.xml&quot;));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static SqlSession createSqlSession(boolean isCommit) &#123;</span><br><span class="line">        return sqlSessionFactory.openSession(isCommit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h6 id="通过SqlSessionFactory中的openSession-true-关闭事务-false-开启事务-默认开启事务-获取一条SqlSession客户端于服务器的会话连接-一个线程单例或唯一"><a href="#通过SqlSessionFactory中的openSession-true-关闭事务-false-开启事务-默认开启事务-获取一条SqlSession客户端于服务器的会话连接-一个线程单例或唯一" class="headerlink" title="通过SqlSessionFactory中的openSession(true:关闭事务,false:开启事务(默认开启事务))获取一条SqlSession客户端于服务器的会话连接(一个线程单例或唯一)"></a>通过SqlSessionFactory中的openSession(<strong>true</strong>:关闭事务,<strong>false</strong>:开启事务(默认开启事务))获取一条SqlSession客户端于服务器的会话连接(一个线程单例或唯一)</h6></li>
<li><p>通过SqlSession来操作数据库的(两种方式)</p>
<ul>
<li><p>获取SqlSession对象之后，根据自己的操作调用不同API操作数据，参数必须namespace+sql标签的id,找到的要执行的sql语句</p>
</li>
<li><p>``` java<br>//    加载MyBatis配置文件 (为了访问数据库)<br>Reader reader = Resources.getResourceAsReader(“conf.xml”);<br>SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);<br>//获取连接SqlSessionFactory 相当于 connection<br>SqlSession conn = sqlSessionFactory.openSession();<br>//从Mapper中找到要执行的sql语句的标签对的id<br>String statement = “org.ax.entity.personMapper.queryPersonById”;<br>//传入要执行的sql标签的id和参数<br>Person person = conn.selectOne(statement, 3);<br>System.out.println(person);<br>conn.close();</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 获取SqlSession对象之后获取通过getMapper(Class&lt;T&gt; var1)获取代理对象 ,操作Mybatis接口,实现动态代理,不需要实现类,因为底层执行的是mapper.xml文件中的SQL标签,只负责定位</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;java</span><br><span class="line">  &#x2F;*</span><br><span class="line">   * 1.方法名和mapper(studentMapper).xml文件的SQL标签的id相同</span><br><span class="line">   * 2.方法的输入参数和mapper.xml文件中标签的parameterType类型保持一致</span><br><span class="line">   * 3.方法的输出参数和mapper.xml文件中标签的resultType类型保持一致</span><br><span class="line">   * 4.namespace的值必须是接口的全类名(其实就是实现了接口和mapper.xml文件的映射),</span><br><span class="line">   * 目的是找到mapper.xml文件,然后在通过方法名和mapper.xml文件中SQL标签的id和接口中的方法名进行映射</span><br><span class="line">   * 以上4缺一不可</span><br><span class="line">   * 匹配过程:(约定过程)</span><br><span class="line">   * 1.根据 接口名找到mapper.xml文件(根据的是namespace&#x3D;接口的全类名)</span><br><span class="line">   * 2.很据 接口的方法名找到mapper.xml文件的SQL标签(方法名&#x3D;SQK标签的id值)</span><br><span class="line">   *</span><br><span class="line">   * 以上2点可以保证:当我们调用接口中的方法时:</span><br><span class="line">   * 程序能自动定位到某一个mapper.xml文件标签</span><br><span class="line">   * *&#x2F;</span><br></pre></td></tr></table></figure></li>
<li><pre><code class="java">    //加载配置文件
       Reader reader = Resources.getResourceAsReader(&quot;conf.xml&quot;);
       SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);
//        获取链接
        SqlSession sqlSession = sqlSessionFactory.openSession();
        //获取动态代理的接口,通过sqlSession拿接口，当调用方法时候，程序自动执行该方法对应的SQL
        StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## mybatis执行流程</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zhx666666&#x2F;img&#x2F;img&#x2F;20210205223547.png)</span><br><span class="line"></span><br><span class="line"># Mybatis-02</span><br><span class="line"></span><br><span class="line">## ResultType和ResultMap区别</span><br><span class="line"></span><br><span class="line">* 如何出现了resultType就不能再出现resultMap了</span><br><span class="line"></span><br><span class="line">* resultType会自动将map的键和对象的属性自动映射起来,其实底层是离不开resultMap,将结果集放入map,将字段设置为键，值设置字段所对应的值</span><br><span class="line"></span><br><span class="line">* resultMap在没有将autoMappingBehavior属性设置FULL时,当使用嵌套映射时就不会自动映射了</span><br><span class="line"></span><br><span class="line">  * FULL完全自动映射</span><br><span class="line"></span><br><span class="line">  * PARTIAL部分自动映射(默认值)</span><br><span class="line"></span><br><span class="line">  * NONE关闭自动映射</span><br><span class="line"></span><br><span class="line">  * 子标签如何用</span><br><span class="line"></span><br><span class="line">    * &#96;&#96;&#96;xml</span><br><span class="line">      &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt; &#x2F;&#x2F;id标签一般设置主键映射的</span><br><span class="line">      &lt;result property&#x3D;&quot;属性名称&quot; column&#x3D;&quot;字段名&quot;&#x2F;&gt; &#x2F;&#x2F;result标签一般映射普通字段的,一般不用写只要设置autoMappingBehavior属性的值为完全自动映射的话就不用写(前提是字段要和属性名相同)</span><br><span class="line">      </span><br></pre></td></tr></table></figure>
* ```xml
  - 一对一映射一般设置自定应用对象，结果集有的情况下
  &lt;association property=&quot;role&quot; javaType=&quot;role&quot;&gt;
      &lt;id property=&quot;id&quot; column=&quot;role_id&quot;/&gt;
      &lt;result property=&quot;roleCode&quot; column=&quot;role_Code&quot;/&gt;
      &lt;result property=&quot;roleName&quot; column=&quot;role_Name&quot;/&gt;
  &lt;/association&gt;
  - 一对一映射一般设置自定应用对象，结果集没有的情况下
      select 表示执行的sql语句如果在同一个命明空间下不用加namespace
      column 表示执行这条sql语句所需的参数,这个参数是第表的某一字段
  &lt;association property=&quot;role&quot; javaType=&quot;role&quot; select=&quot;org.ax.mapper.RoleMapper.findByRoleId&quot; column=&quot;user_role&quot;/&gt;

  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* &#96;&#96;&#96;xml</span><br><span class="line">  - 一对多映射一般设置自定应用对象，结果集有的情况下</span><br><span class="line">  &lt;collection property&#x3D;&quot;role&quot; javaType&#x3D;&quot;role&quot;&gt;</span><br><span class="line">      &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;role_id&quot;&#x2F;&gt;</span><br><span class="line">      &lt;result property&#x3D;&quot;roleCode&quot; column&#x3D;&quot;role_Code&quot;&#x2F;&gt;</span><br><span class="line">      &lt;result property&#x3D;&quot;roleName&quot; column&#x3D;&quot;role_Name&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;collection&gt;</span><br><span class="line">  - 一对多映射一般设置自定应用对象，结果集没有的情况下</span><br><span class="line">  	select 表示执行的sql语句如果在同一个命明空间下不用加namespace</span><br><span class="line">  	column 表示执行这条sql语句所需的参数,这个参数是第表的某一字段 推荐</span><br><span class="line">  &lt;collection property&#x3D;&quot;userList&quot;  select&#x3D;&quot;org.ax.mapper.RoleMapper.findByRoleId&quot; column&#x3D;&quot;user_role&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
## #和$区别</code></pre>
</li>
</ul>
</li>
<li><p>#编译阶段会变成? $会变成值,也就是说$编译时就已经编译了</p>
</li>
<li><p>#安全 $存在sql注入因为编辑就已经编译成具体的值了</p>
</li>
<li><p>#带’’一般用于替代参数  $不带’’一般代替特殊参数例如字段名…</p>
</li>
</ul>
<h2 id="settings中常用到属性"><a href="#settings中常用到属性" class="headerlink" title="settings中常用到属性"></a>settings中常用到属性</h2><ul>
<li>mapUnderscoreToCamelCase下划线转驼峰 默认false 开启true</li>
<li>autoMappingBehavior自动装配 有三个级别默认PARTIAL<ul>
<li>FULL 完全自动装配</li>
<li>PARTIAL 部分自动装配不包括嵌套映射如resultMap</li>
<li>NONE 关闭自动装配</li>
</ul>
</li>
<li>lazyLoadingEnabled 延迟加载  默认false 开启true</li>
<li>aggressiveLazyLoading立即加载 默认true 关闭false </li>
<li>lazyLoadTriggerMethods调用了默认的触发方法 默认值：equals,clone,hashCode,toString 有于java会自动掉toString方法所以指定value为空就行了</li>
</ul>
<h2 id="typeAliases设置的属性"><a href="#typeAliases设置的属性" class="headerlink" title="typeAliases设置的属性"></a>typeAliases设置的属性</h2><ul>
<li>package name=包名 给指定的包下的类起别名调用时不需要写全限定名称 只需要写类的名字就行了不区分大小写</li>
<li>typeAlias type=类型的全限定名称 alias=”这个类的别名”</li>
</ul>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h6 id="如果用多个参数可以通过Param注解来指定这个参数的名称"><a href="#如果用多个参数可以通过Param注解来指定这个参数的名称" class="headerlink" title="如果用多个参数可以通过Param注解来指定这个参数的名称"></a>如果用多个参数可以通过Param注解来指定这个参数的名称</h6><h6 id="也可不指定默认使用arg0-gt-arg-来指定多个参数的名称"><a href="#也可不指定默认使用arg0-gt-arg-来指定多个参数的名称" class="headerlink" title="也可不指定默认使用arg0-&gt;arg+来指定多个参数的名称"></a>也可不指定默认使用arg0-&gt;arg+来指定多个参数的名称</h6><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h6 id="MyBatis中的缓存分为两种：一级缓存和二级缓存。使用过MyBatis的可能听到过这样一句话“一级缓存是sqlSession级别的，二级缓存是mapper级别的”。这也说明了，当使用同一个sqlSession时，查询到的数据可能是一级缓存；而当使用同一个mapper是，查询到的数据可能是二级缓存"><a href="#MyBatis中的缓存分为两种：一级缓存和二级缓存。使用过MyBatis的可能听到过这样一句话“一级缓存是sqlSession级别的，二级缓存是mapper级别的”。这也说明了，当使用同一个sqlSession时，查询到的数据可能是一级缓存；而当使用同一个mapper是，查询到的数据可能是二级缓存" class="headerlink" title="MyBatis中的缓存分为两种：一级缓存和二级缓存。使用过MyBatis的可能听到过这样一句话“一级缓存是sqlSession级别的，二级缓存是mapper级别的”。这也说明了，当使用同一个sqlSession时，查询到的数据可能是一级缓存；而当使用同一个mapper是，查询到的数据可能是二级缓存"></a>MyBatis中的缓存分为两种：一级缓存和二级缓存。使用过MyBatis的可能听到过这样一句话“一级缓存是sqlSession级别的，二级缓存是mapper级别的”。这也说明了，当使用同一个sqlSession时，查询到的数据可能是一级缓存；而当使用同一个mapper是，查询到的数据可能是二级缓存</h6><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205223546.png" alt="缓存执行机制"></p>
<h1 id="MyBatis-03"><a href="#MyBatis-03" class="headerlink" title="MyBatis-03"></a>MyBatis-03</h1><h2 id="动态标签"><a href="#动态标签" class="headerlink" title="动态标签"></a>动态标签</h2><ul>
<li><p><strong>if</strong>中的test表示条件多个条件可以用and隔开</p>
</li>
<li><p><strong>trim</strong></p>
<ul>
<li><strong>prefix</strong>表示拼接的前缀</li>
<li><strong>prefixOverrides</strong>表示修建前缀的符号</li>
<li><strong>suffix</strong>表示拼接的后缀</li>
<li><strong>suffixOverrides</strong>表示修建的后缀</li>
</ul>
</li>
<li><p><strong>choose</strong></p>
<ul>
<li>when表示条件test属性来设置属性第一个标签类似于java中的if,第二个when类似于else if</li>
<li>otherwise其它情况下类似else</li>
</ul>
</li>
<li><p><strong>set</strong>在修改时会使用,是trim的派生</p>
<ul>
<li>默认会添加set关键字</li>
<li>会自动修建值为,的后缀</li>
</ul>
</li>
<li><p><strong>where</strong>类型<strong>set</strong></p>
<ul>
<li>如果有条件的情况下会自动添加where</li>
<li>自动修建前缀and</li>
</ul>
</li>
<li><p><strong>foreach</strong>类似于JSTL中的foreach</p>
<ul>
<li>collection:集合名称</li>
<li>open:开始符号</li>
<li>close:结束符号</li>
<li>separator:分隔符</li>
<li>item:当前项</li>
<li>index:当前索引</li>
<li>循环体中用#{item}获取当前项</li>
</ul>
</li>
<li><p>bind再编译标签得到元数据可以加工</p>
<ul>
<li>```xml<br><bind name="likeName" value="'%' + (k==null?'is null':k) + '%'"/>//支持三元表达式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 注解版本进行映射</span><br><span class="line"></span><br><span class="line">* &#96;&#96;&#96;java</span><br><span class="line">  &#x2F;&#x2F;    使用一对一进行映射属性和注解是one</span><br><span class="line">      @Results(&#123;</span><br><span class="line">              @Result(id &#x3D; true,property &#x3D; &quot;id&quot;,column &#x3D; &quot;id&quot;),&#x2F;&#x2F;id表示主键列</span><br><span class="line">              @Result(property &#x3D; &quot;role&quot;,column &#x3D; &quot;user_role&quot;,one &#x3D;</span><br><span class="line">              @One(select &#x3D; &quot;org.ax.mapper.RoleMapper.findRoleId&quot;))</span><br><span class="line">      &#125;)</span><br><span class="line">      @Select(&quot;select * from smbms_user where id&#x3D;#&#123;id&#125;&quot;)</span><br><span class="line">      User findUserId(Integer id);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><pre><code class="java">//一对多进行映射属性和注解是many
@Results(&#123;
        @Result(property = &quot;userList&quot;,column = &quot;id&quot;,
                // Many表示集合
                many = @Many(select = &quot;org.ax.mapper.UserMaper.findUserRoleId&quot;))
&#125;)
@Select(&quot;select * from smbms_role where id=#&#123;id&#125;&quot;)
Role findRoleId(Integer id);</code></pre>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>springboot基础</title>
    <url>/2021/01/25/springboot%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="springboot介绍"><a href="#springboot介绍" class="headerlink" title="springboot介绍"></a>springboot介绍</h1><h3 id="为什么用SpringBoot"><a href="#为什么用SpringBoot" class="headerlink" title="为什么用SpringBoot"></a>为什么用SpringBoot</h3><p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p>
<p>能快速创建出生产级别的Spring应用</p>
<h3 id="SpringBoot优点"><a href="#SpringBoot优点" class="headerlink" title="SpringBoot优点"></a>SpringBoot优点</h3><ul>
<li><p>Create stand-alone Spring applications</p>
</li>
<li><ul>
<li>创建独立Spring应用</li>
</ul>
</li>
<li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p>
</li>
<li><ul>
<li>内嵌web服务器</li>
</ul>
</li>
<li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p>
</li>
<li><ul>
<li>自动starter依赖，简化构建配置</li>
</ul>
</li>
<li><p>Automatically configure Spring and 3rd party libraries whenever possible</p>
</li>
<li><ul>
<li>自动配置Spring以及第三方功能</li>
</ul>
</li>
<li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p>
</li>
<li><ul>
<li>提供生产级别的监控、健康检查及外部化配置</li>
</ul>
</li>
<li><p>Absolutely no code generation and no requirement for XML configuration</p>
</li>
<li><ul>
<li>无代码生成、无需编写XML</li>
</ul>
</li>
</ul>
<blockquote>
<p>SpringBoot是整合Spring技术栈的一站式框架</p>
<p>SpringBoot是简化Spring技术栈的快速开发脚手架</p>
</blockquote>
<h3 id="SpringBoot缺点"><a href="#SpringBoot缺点" class="headerlink" title="SpringBoot缺点"></a>SpringBoot缺点</h3><ul>
<li>人称版本帝，更新快,需要时刻关注变化</li>
<li>封装太深,内部原理复杂，不容易精通</li>
</ul>
<h1 id="springboot2入门"><a href="#springboot2入门" class="headerlink" title="springboot2入门"></a>springboot2入门</h1><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建主程序"><a href="#创建主程序" class="headerlink" title="创建主程序"></a>创建主程序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主程序类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span>：这是一个SpringBoot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写业务"><a href="#编写业务" class="headerlink" title="编写业务"></a>编写业务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot 2!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>把项目打成jar包，直接在目标服务器执行即可。</p>
<p>注意点：</p>
<ul>
<li>取消掉cmd的快速编辑模式</li>
</ul>
<h3 id="了解自动配置原理"><a href="#了解自动配置原理" class="headerlink" title="了解自动配置原理"></a><strong>了解自动配置原理</strong></h3><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><ul>
<li><p>父工程最依赖管理</p>
</li>
<li><p>```<br>依赖管理    </p>
<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.4.RELEASE</version>
</parent>

<p>他的父项目</p>
 <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-dependencies</artifactId>
    <version>2.3.4.RELEASE</version>
  </parent>

<p>几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制<br>优点版本控制    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 开发导入starter场景启动器</span><br><span class="line"></span><br><span class="line">* &#96;&#96;&#96;xml</span><br><span class="line">  1、见到很多 spring-boot-starter-* ： *就某种场景</span><br><span class="line">  2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</span><br><span class="line">  3、SpringBoot所有支持的场景</span><br><span class="line">  https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-boot&#x2F;docs&#x2F;current&#x2F;reference&#x2F;html&#x2F;using-spring-boot.html#using-boot-starter</span><br><span class="line">  4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</span><br><span class="line">  5、所有场景启动器最底层的依赖</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>无需关注版本号</p>
</li>
<li><pre><code>1、引入依赖默认都可以不写版本
2、引入非版本仲裁的jar，要写版本号。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 可以修改springboot默认提供的版本号</span><br><span class="line"></span><br><span class="line">* &#96;&#96;&#96;</span><br><span class="line">  1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。</span><br><span class="line">  2、在当前项目里面重写配置</span><br><span class="line">      &lt;properties&gt;</span><br><span class="line">          &lt;mysql.version&gt;5.1.43&lt;&#x2F;mysql.version&gt;</span><br><span class="line">      &lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure>
### 自动配置</code></pre>
</li>
</ul>
<ul>
<li><p>自动配好Tomcat</p>
</li>
<li><ul>
<li>引入Tomcat依赖。</li>
<li>配置Tomcat</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.3.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>自动配好SpringMVC</p>
</li>
<li><ul>
<li>引入SpringMVC全套组件</li>
<li>自动配好SpringMVC常用组件（功能）</li>
</ul>
</li>
<li><p>自动配好Web常见功能，如：字符编码问题</p>
</li>
<li><ul>
<li>SpringBoot帮我们配置好了所有web开发的常见场景</li>
</ul>
</li>
<li><p>默认的包结构</p>
</li>
<li><ul>
<li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li>
<li>无需以前的包扫描配置</li>
<li>想要改变扫描路径，@SpringBootApplication(scanBasePackages=<strong>“com.atguigu”</strong>)</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>或者@ComponentScan 指定扫描路径</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">等同于</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.boot&quot;)</span></span><br></pre></td></tr></table></figure>


<ul>
<li><p>各种配置拥有默认值</p>
</li>
<li><ul>
<li>默认配置最终都是映射到某个类上，如：MultipartProperties</li>
<li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li>
</ul>
</li>
<li><p>按需加载所有自动配置项</p>
</li>
<li><ul>
<li>非常多的starter</li>
<li>引入了哪些场景这个场景的自动配置才会开启</li>
<li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li>
<li></li>
</ul>
</li>
<li><p>……</p>
</li>
</ul>
<h3 id="容器功能"><a href="#容器功能" class="headerlink" title="容器功能"></a>容器功能</h3><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><ul>
<li><p>基本使用</p>
</li>
<li><p><strong>Full模式与Lite模式</strong></p>
</li>
<li><ul>
<li>示例</li>
<li>最佳实战</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断</li>
<li>配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#############################Configuration使用示例######################################################</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、配置类里面使用<span class="doctag">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class="line"><span class="comment"> * 2、配置类本身也是组件</span></span><br><span class="line"><span class="comment"> * 3、proxyBeanMethods：代理bean的方法</span></span><br><span class="line"><span class="comment"> *      Full(proxyBeanMethods = true)、【保证每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是单实例的】</span></span><br><span class="line"><span class="comment"> *      Lite(proxyBeanMethods = false)【每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是新创建的】</span></span><br><span class="line"><span class="comment"> *      组件依赖必须使用Full模式默认。其他默认是否Lite模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################@Configuration测试代码如下########################################</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.boot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、从容器中获取组件</span></span><br><span class="line"></span><br><span class="line">        Pet tom01 = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        Pet tom02 = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;组件：&quot;</span>+(tom01 == tom02));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、com.atguigu.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span></span><br><span class="line">        MyConfig bean = run.getBean(MyConfig.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。</span></span><br><span class="line">        <span class="comment">//保持组件单实例</span></span><br><span class="line">        User user = bean.user01();</span><br><span class="line">        User user1 = bean.user01();</span><br><span class="line">        System.out.println(user == user1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        User user01 = run.getBean(<span class="string">&quot;user01&quot;</span>, User.class);</span><br><span class="line">        Pet tom = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用户的宠物：&quot;</span>+(user01.getPet() == tom));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Bean、-Component、-Controller、-Service、-Repository"><a href="#Bean、-Component、-Controller、-Service、-Repository" class="headerlink" title="@Bean、@Component、@Controller、@Service、@Repository"></a>@Bean、@Component、@Controller、@Service、@Repository</h3><h3 id="ComponentScan、-Import"><a href="#ComponentScan、-Import" class="headerlink" title="@ComponentScan、@Import"></a>@ComponentScan、@Import</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;User.class, DBHelper.class&#125;)</span> <span class="comment">//给容器自动创建这两个类的组件</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Conditional根据条件进行注入到容器"><a href="#Conditional根据条件进行注入到容器" class="headerlink" title="@Conditional根据条件进行注入到容器"></a>@Conditional根据条件进行注入到容器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编程人:赵浩鑫</span></span><br><span class="line"><span class="comment"> * 时间:2021-01-02-14:20</span></span><br><span class="line"><span class="comment"> * 设置服务时区,作用域mysql:set global time_zone =&#x27;+8:00&#x27;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span><span class="comment">//表示这是spring配置类</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * proxyBeanMethods 是否使用代理 true 代理 默认值 重量级别</span></span><br><span class="line"><span class="comment"> * false 非代理 轻量级</span></span><br><span class="line"><span class="comment"> *  区别 重量级每次都判断容器是否存在此实例 ,多说的单例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@EnableConfigurationProperties(&#123;Car.class&#125;)</span></span><br><span class="line"><span class="comment">/**1.开启指定类的配置绑定功能</span></span><br><span class="line"><span class="comment"> * 2.把这个Car这个组件自动注入到容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@ImportResource(&#123;&quot;classpath:beans.xml&quot;&#125;)//导入其它配置文件</span></span><br><span class="line"><span class="comment">//@ConditionalOnClass(&#123;Person.class&#125;) //当满足条件在注册组件.当项目中存在这个类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//    @ConditionalOnMissingClass(Pet.class)//当项目中不存在这个类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">pet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="number">95</span>, <span class="string">&quot;沐沐&quot;</span>, <span class="number">65</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean(name = &quot;pet&quot;)</span><span class="comment">//如果容器中存在指定id的组件 然后再注入</span></span><br><span class="line"><span class="comment">//    @ConditionalOnMissingBean(name = &quot;pet01&quot;) 敲好相反</span></span><br><span class="line"><span class="comment">//    @ConditionalOnClass(value = &#123;Pet.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Student s=<span class="keyword">new</span> Student();</span><br><span class="line">        s.setStuName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">15</span>);</span><br><span class="line">        s.setPet(pet());</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Converter&lt;String, LocalDateTime&gt; <span class="title">LocalDateTimeConvert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Converter&lt;String, LocalDateTime&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                DateTimeFormatter df = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">                LocalDateTime date = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    date = LocalDateTime.parse((String) source,df);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> date;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="ImportResource-“classpath-beans-xml”-…-导入以文件形式的配置"><a href="#ImportResource-“classpath-beans-xml”-…-导入以文件形式的配置" class="headerlink" title="@ImportResource({“classpath:beans.xml”,….}) 导入以文件形式的配置"></a>@ImportResource({“classpath:beans.xml”,….}) 导入以文件形式的配置</h3><h3 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h3><p>如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getProperties</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">         Properties pps = <span class="keyword">new</span> Properties();</span><br><span class="line">         pps.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.properties&quot;</span>));</span><br><span class="line">         Enumeration enum1 = pps.propertyNames();<span class="comment">//得到配置文件的名字</span></span><br><span class="line">         <span class="keyword">while</span>(enum1.hasMoreElements()) &#123;</span><br><span class="line">             String strKey = (String) enum1.nextElement();</span><br><span class="line">             String strValue = pps.getProperty(strKey);</span><br><span class="line">             System.out.println(strKey + <span class="string">&quot;=&quot;</span> + strValue);</span><br><span class="line">             <span class="comment">//封装到JavaBean。</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConfigurationPropertie"><a href="#ConfigurationPropertie" class="headerlink" title="@ConfigurationPropertie"></a>@ConfigurationPropertie</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span><span class="comment">//以配置文件以前缀mycar开始的属性和这个类的属性进行绑定,底层使用setXXX</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Integer price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="EnableConfigurationProperties-ConfigurationProperties"><a href="#EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="@EnableConfigurationProperties + @ConfigurationProperties"></a>@EnableConfigurationProperties + @ConfigurationProperties</h3><h3 id="Component-ConfigurationProperties"><a href="#Component-ConfigurationProperties" class="headerlink" title="@Component + @ConfigurationProperties"></a>@Component + @ConfigurationProperties</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="comment">//1、开启Car配置绑定功能</span></span><br><span class="line"><span class="comment">//2、把这个Car这个组件自动注册到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自动配置原理入门"><a href="#自动配置原理入门" class="headerlink" title="自动配置原理入门"></a>自动配置原理入门</h2><h3 id="引导加载自动配置类"><a href="#引导加载自动配置类" class="headerlink" title="引导加载自动配置类"></a>引导加载自动配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">======================</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><p>​    @Configuration当表当前是一个配置类</p>
<h4 id="ComponentScan指定扫描包下类所标注的spring注解"><a href="#ComponentScan指定扫描包下类所标注的spring注解" class="headerlink" title="@ComponentScan指定扫描包下类所标注的spring注解"></a>@ComponentScan指定扫描包下类所标注的spring注解</h4><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="AutoConfigurationPackage自动配置包-指定了默认的包规则"><a href="#AutoConfigurationPackage自动配置包-指定了默认的包规则" class="headerlink" title="@AutoConfigurationPackage自动配置包,指定了默认的包规则"></a>@AutoConfigurationPackage自动配置包,指定了默认的包规则</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span>  <span class="comment">//给容器中导入一系列组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用Registrar给容器中导入一系列组件</span></span><br><span class="line"><span class="comment">//将指定的一个包下的所有组件导入进来？MainApplication 所在包下。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//获取注解所标注的类所在的包，然后进行扫描	</span></span><br><span class="line">        register(registry, <span class="keyword">new</span> PackageImports(metadata).getPackageNames().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">				</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import(AutoConfigurationImportSelector.class)"></a>@Import(AutoConfigurationImportSelector.class)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件</span><br><span class="line"><span class="number">2</span>、调用List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类</span><br><span class="line"><span class="number">3</span>、利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader)；得到所有的组件</span><br><span class="line"><span class="number">4</span>、从META-INF/spring.factories位置来加载一个文件。</span><br><span class="line">    默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件</span><br><span class="line">    spring-boot-autoconfigure-<span class="number">2.3</span><span class="number">.4</span>.RELEASE.jar包里面也有META-INF/spring.factories</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h4 id="按需开启自动配置项"><a href="#按需开启自动配置项" class="headerlink" title="按需开启自动配置项"></a>按需开启自动配置项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">虽然我们127个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration</span><br><span class="line">按照条件装配规则（@Conditional），最终会按需配置。</span><br></pre></td></tr></table></figure>
<h4 id="修改用户所配置的组件-以防合法"><a href="#修改用户所配置的组件-以防合法" class="headerlink" title="修改用户所配置的组件,以防合法"></a>修改用户所配置的组件,以防合法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="comment">//容器中有这个类型组件</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class="comment">//容器中没有这个名字 multipartResolver 的组件</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class="line">            <span class="comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class="line">            <span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line">            <span class="keyword">return</span> resolver;</span><br><span class="line">        &#125;</span><br><span class="line">给容器中加入了文件上传解析器；</span><br></pre></td></tr></table></figure>
<h5 id="SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先"><a href="#SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先" class="headerlink" title="SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先"></a>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span><span class="comment">//表示容器中不存在这个组件,如果用户没有配置的话就用boot自动配置的</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>总结</p>
<ul>
<li><p>springboot 先加载所有的自动配置类 xxxAutoConfiguration</p>
</li>
<li><p>每个配置类按照条件进行纳入容器,默认都会绑定配置文件指定的值,xxxProperties.class里面拿,xxxProperties.class和配置文件进行绑定</p>
</li>
<li><p>生效的配置类就会给容器中装配很多组件</p>
</li>
<li><p>只要容器中有了这些组件，相当就有了这些功能</p>
</li>
<li><p>定制化配置</p>
<ul>
<li><p>用户直接自己@Bean替代springboot底层的组件</p>
</li>
<li><p>用户可以看springboot自动配类所绑定的配置文件,用户只需改绑定的配置文件的值即可</p>
<ul>
<li><p>例如</p>
<ul>
<li><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205223507.png"></p>
</li>
<li><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205223506.png"></p>
</li>
<li><pre><code class="properties">server.servlet.encoding.charset=utf-8
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    **xxxxxAutoConfiguration ---&gt; 组件  ---&gt;** **xxxxProperties里面拿值  ----&gt; application.properties**</span><br><span class="line"></span><br><span class="line">### 修改banner</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;properties</span><br><span class="line">spring.banner.image.location&#x3D;classpath:(banner.*)默认值</span><br></pre></td></tr></table></figure>
## 1.开发小技巧
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-1安装lombok"><a href="#1-1安装lombok" class="headerlink" title="1.1安装lombok"></a>1.1安装lombok</h3><p>简化web开发,一下是maven的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">idea中搜索安装lombok插件</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">===============================简化JavaBean开发===================================</span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name,Integer age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================简化日志开发===================================</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;请求进来了....&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot 2!&quot;</span>+<span class="string">&quot;你好：&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2dev-tools-重新如果源代码发生改变重新load"><a href="#1-2dev-tools-重新如果源代码发生改变重新load" class="headerlink" title="1.2dev-tools 重新如果源代码发生改变重新load"></a>1.2dev-tools 重新如果源代码发生改变重新load</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">快捷键ctrl+f9</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>spring</title>
    <url>/2021/01/25/spring-1/</url>
    <content><![CDATA[<h2 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h2><p><strong>Spring : 春天 —&gt;给软件行业带来了春天</strong></p>
<p><strong>2002年，Rod Jahnson首次推出了Spring框架雏形interface21框架。</strong></p>
<p><strong>2004年3月24日，Spring框架以interface21框架为基础，经过重新设计，发布了1.0正式版。</strong></p>
<p><strong>很难想象Rod Johnson的学历 , 他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。</strong></p>
<p><strong>Spring理念 : 使现有技术更加实用 . 本身就是一个大杂烩 , 整合现有的框架技术</strong></p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p><strong>1、Spring是一个开源免费的框架 , 容器 .</strong></p>
<p><strong>2、Spring是一个轻量级的框架 , 非侵入式的 .</strong></p>
<p><strong>3、控制反转 IoC , 面向切面 Aop</strong></p>
<p><strong>4、对事物的支持 , 对框架的支持</strong></p>
<h2 id="ioc"><a href="#ioc" class="headerlink" title="ioc"></a>ioc</h2><p><strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p>
<p><strong>将组件对象的控制权从代码转移到外部容器(ioc)</strong></p>
<p><strong>组件化的思想:分离关注点 关注接口,不在关注实现类</strong></p>
<p><strong>目的:解耦合,实现每个组件只关注组件内部的事情</strong></p>
<p><strong>对内只关注本类的代码</strong></p>
<p><strong>对外只关注接口</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//注入ioc容器</span><br><span class="line"><span class="comment">&lt;!--bean就是java对象,由Spring创建和管理--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符</span></span><br><span class="line"><span class="comment">   如果配置id,又配置了name,那么name是别名</span></span><br><span class="line"><span class="comment">   name可以设置多个别名,可以用逗号,分号,空格隔开</span></span><br><span class="line"><span class="comment">   如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class是bean的全限定名=包名+类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;iphone&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.ax.bean.Iphone&quot;</span> <span class="attr">p:weight</span>=<span class="string">&quot;258&quot;</span> <span class="attr">p:money</span>=<span class="string">&quot;8585&quot;</span> <span class="attr">p:size</span>=<span class="string">&quot;5.9&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;iphone Xs&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.ax.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;iphone&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;iphone&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ink&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.ax.ink.GreyInk&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;page&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.ax.page.imple.TestPage&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;print&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.ax.print.Print&quot;</span> <span class="attr">p:ink-ref</span>=<span class="string">&quot;ink&quot;</span> <span class="attr">p:page-ref</span>=<span class="string">&quot;page&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@Import(MyConfig2.class)</span><span class="comment">//引用其它的配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">student</span><span class="params">(<span class="meta">@Qualifier(&quot;appearance&quot;)</span> Appearance appearance)</span></span>&#123; <span class="comment">//通过Qualifier注解中的id或name进行装配</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student(<span class="number">1</span>,appearance,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">     applicationContext=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;springconfig.xml&quot;</span>);<span class="comment">//会对配置文件bean标签指定的class进行加载</span></span><br><span class="line">applicationContext。=<span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfig.class);<span class="comment">//加载配置类</span></span><br><span class="line">     Student student=(Student)applicationContext.getBean(<span class="string">&quot;student&quot;</span>/Class.class);<span class="comment">//通过bean的id或类型获取bean</span></span><br></pre></td></tr></table></figure>
<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><ul>
<li><p>依赖注入（Dependency Injection,DI）。</p>
</li>
<li><p>依赖 : 指Bean对象的创建依赖于容器 . Bean对象的依赖资源 .</p>
</li>
<li><p>注入 : 指Bean对象所依赖的资源 , 由容器来设置和装配 .</p>
</li>
<li><pre><code class="xml">&lt;!--P(属性: properties)命名空间 , 直接注入属性--&gt;
 &lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot; p:name=&quot;狂神&quot; p:age=&quot;18&quot;/&gt;

 &lt;!--C(构造: Constructor)命名空间 , 使用构造器注入--&gt;
 &lt;bean id=&quot;user&quot; class=&quot;com.kuang.pojo.User&quot; c:name=&quot;狂神&quot; c:age=&quot;18&quot;/&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## aop</span><br><span class="line"></span><br><span class="line">底层采用动态代理以及Aspectj技术在不修改目标方法的前提下,为目标方法增强新功能,**将公共功能集中解决**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">&#x2F;&#x2F;日志通知对象</span><br><span class="line">public class LogAdvice &#123;</span><br><span class="line">    Logger logger&#x3D; LoggerFactory.getLogger(getClass());</span><br><span class="line">&#x2F;&#x2F;    用于前置通知</span><br><span class="line">    public void before(JoinPoint joinPoint) throws Exception&#123;</span><br><span class="line">        final Object target &#x3D; joinPoint.getTarget();&#x2F;&#x2F;获取目标对象</span><br><span class="line">        final Signature signature &#x3D; joinPoint.getSignature();</span><br><span class="line">&#x2F;&#x2F;        System.out.println(signature.getModifiers());</span><br><span class="line">        logger.debug(&quot;执行的对象时...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;    后置通知</span><br><span class="line">    public void after(JoinPoint joinPoint,Object result)&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;后置通知..返回值&quot;+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    连接点 通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.ax.aop.LogAdvice&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        切入点--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;aop:pointcut id=&quot;pointcut1&quot; expression=&quot;execution(* org.ax.bean.Student.*(..))&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut2&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.ax.bean.Student.add())&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        织入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;logAdvice&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;pointcut2&quot;/&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut2&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span>/&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!--returning表示目标方法的返回值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
## p:命明空间注入和构造进行注入
</code></pre>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">id</span>=<span class="string">&quot;str&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.ax.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;str&quot;</span>/&gt;</span> //如果是包装类型或String引用类型可以使用ref引用进行依赖</span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.ObJect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">可以时用</span><br><span class="line">name执行参数名 index参数索引 type类型 等指定</span><br></pre></td></tr></table></figure>
<h2 id="注入不同数据类型"><a href="#注入不同数据类型" class="headerlink" title="注入不同数据类型"></a>注入不同数据类型</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    注入不同的引用类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myCollection&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.ax.bean.MyCollection&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        给set集合进行赋值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>李白<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>杜甫<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>王安石<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        给properties类型注入值 值是值类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span>&gt;</span>雨天<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span>&gt;</span>晴天<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;str&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                如果没有被其它bean所依赖可以写到内部--&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;org.ax.bean.Student&quot;</span> &gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李白&quot;</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;mapk1&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>wd<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;mapk2&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;student&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;args&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>wda<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>wdad<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="自动装配的注解"><a href="#自动装配的注解" class="headerlink" title="自动装配的注解"></a>自动装配的注解</h2><ul>
<li><strong>@Autowired 先根据类型然后根据id进行装配</strong></li>
<li><strong>@Resource 先根据id然后根据类型进行装配,可以根据name属性指定bean的id</strong></li>
<li><strong>@Qualifier(“bean的id”)进行装配</strong></li>
</ul>
<h2 id="通过注解纳入ioc"><a href="#通过注解纳入ioc" class="headerlink" title="通过注解纳入ioc"></a>通过注解纳入ioc</h2><ul>
<li><strong>注解的参数”bean的id 默认类名首字母小写”，通过不同的注解进行标识bean层次，</strong></li>
<li>@Component 一般标注bean</li>
<li>@Service 标识业务层</li>
<li>@Controller 标识控制层</li>
<li>@Repository 持久层</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    扫描包下的类所标注的注解,纳入容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.ax.bean&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;student3&quot;)</span><span class="comment">//通过注解纳入ioc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;张楠&quot;)</span><span class="comment">//设置属性的值</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;15&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//想要将容器中的额bean注入进来 首先本类必须纳入ioc</span></span><br><span class="line">    <span class="keyword">private</span> Bean age;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//环绕增强将掌握的目标方法的执行权</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAround</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        Object result=<span class="string">&quot;wd&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;环绕&gt; 前置通知&quot;</span>);</span><br><span class="line">            result=point.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;环绕&gt; 后置通知&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;环绕&gt; 异常通知&quot;</span>);</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;环绕&gt; 最终通知,结果:&quot;</span>+result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    将增强功能纳入ioc容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logAround&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.ax.aop.LogAround&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置连接点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;ps1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.ax.bean.Student.sayHello(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        织入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;logAround&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;ps1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="注解版增强"><a href="#注解版增强" class="headerlink" title="注解版增强"></a>注解版增强</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//纳入ioc容器中</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//织入增强</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AroundAnnotations</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* org.ax.bean.Student.sayHello(..))&quot;)</span><span class="comment">//前置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注解版的前置通知...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around(&quot;execution(* org.ax.bean.Student.sayHello(..))&quot;)</span><span class="comment">//环绕通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        Object result=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;环绕通知&gt; : 注解版的前置通知...&quot;</span>);</span><br><span class="line">            result= point.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;环绕通知&gt; : 注解版的后置通知...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;环绕通知&gt; : 注解版的异常通知...&quot;</span>);</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;环绕通知&gt; : 注解版的最终通知...，结果:&quot;</span>+result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--启动注解版的通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="spring整合Mybatis-servlet"><a href="#spring整合Mybatis-servlet" class="headerlink" title="spring整合Mybatis-servlet"></a>spring整合Mybatis-servlet</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    db--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        dao--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        mybatis整合spring主要所用到SqlSessionFactoryBean--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        service--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--       spring-web 提供ContextClassListener启动器来加载工厂spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        提供了事务管理器 也可以使用spring-jdbc(core,bean,tx)</span></span><br><span class="line"><span class="comment">此包中找不到java.lang.NoClassDefFoundError: org/springframework/jdbc/datasource/TransactionAwareDataS会报异常错误--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        controller 控制器--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;javax&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;javaee-api&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;8.0.1&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        view部分--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;jstl&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;jstl&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;1.2&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        测试部分--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 整合引入jackson --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    引入嵌入式的Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.30.v20200611<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="通过配置类整合Mybatis"><a href="#通过配置类整合Mybatis" class="headerlink" title="通过配置类整合Mybatis"></a>通过配置类整合Mybatis</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ax.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.ax.pojo.Role;</span><br><span class="line"><span class="keyword">import</span> org.ax.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编程人:赵浩鑫</span></span><br><span class="line"><span class="comment"> * 时间:2020-12-29-09:51</span></span><br><span class="line"><span class="comment"> * 设置服务时区,作用域mysql:set global time_zone =&#x27;+8:00&#x27;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;org.ax.mapper&quot;)</span><span class="comment">//将映射文件所对应的映射器纳入Ioc,生成代理对象</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;org.ax.service&quot;)</span><span class="comment">//扫描包下类所标注的注解，纳入容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//配置数据源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource=<span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mvcmybatis?serverTimezone=UTC&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//配置匹配资源bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PathMatchingResourcePatternResolver <span class="title">patternResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SneakyThrows</span> <span class="comment">//lombok提供的用注解捕捉异常,提高代码层次</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//配置sqlSesionFactoryBean,依赖mybatis配置文件和映射文件,数据源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sf=<span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sf.setDataSource(dataSource());</span><br><span class="line">        sf.setConfigLocation(patternResolver().getResource(<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>));</span><br><span class="line">        sf.setMapperLocations(patternResolver().getResources(<span class="string">&quot;classpath:mapper/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> sf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(&quot;role1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">role1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Role(<span class="number">1</span>, <span class="string">&quot;幻影&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(&quot;role2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">role2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Role(<span class="number">1</span>, <span class="string">&quot;幻影2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    参数默认按照类型装配,如果出现出现多种bean的话，可以同通过形参名来执行ref=&quot;bean的id&quot;,</span></span><br><span class="line"><span class="comment">//    或者指定@Qualifier(&quot;role1&quot;)注解指定ref指定的id</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">(<span class="meta">@Qualifier(&quot;role1&quot;)</span> Role a)</span></span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setRole(a);</span><br><span class="line">        user.setUsername(<span class="string">&quot;李三&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通过web-xml方式加载spring容器"><a href="#通过web-xml方式加载spring容器" class="headerlink" title="通过web.xml方式加载spring容器"></a>通过web.xml方式加载spring容器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      防止重复加载，出现多个对象 web容器启动时,默认会加载相对路径下的application.xml文件--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   接受带注解的类作为输入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.springframework.web.context.support.AnnotationConfigWebApplicationContext<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    指明配置配的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.ax.config.SpringConfig<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">&lt;!--    加载springmvc容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.springframework.web.context.support.AnnotationConfigWebApplicationContext<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.ax.config.WebConfig<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="通过类加载SSM容器"><a href="#通过类加载SSM容器" class="headerlink" title="通过类加载SSM容器"></a>通过类加载SSM容器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OcrWebAppInitializer</span> <span class="keyword">extends</span>  <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; SpringConfig.class &#125;;<span class="comment">//指定的spring配置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; MvcConfig.class &#125;;        <span class="comment">//ָ指定Web配置</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;    <span class="comment">//将DispatcherServlet映射到&quot;/&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; <span class="string">&quot;/&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="laytpl"><a href="#laytpl" class="headerlink" title="laytpl"></a>laytpl</h2><h6 id="laytpl-是-JavaScript-模板引擎，在字符解析上有着比较出色的表现，欠缺之处在于异常调试上。由于传统意义的前端模板引擎已经变得不再流行，所以-laytpl-后续可能会进行重写，目前方向暂时还没有想好，预计会在layui比较稳定后开始实施。"><a href="#laytpl-是-JavaScript-模板引擎，在字符解析上有着比较出色的表现，欠缺之处在于异常调试上。由于传统意义的前端模板引擎已经变得不再流行，所以-laytpl-后续可能会进行重写，目前方向暂时还没有想好，预计会在layui比较稳定后开始实施。" class="headerlink" title="laytpl 是 JavaScript 模板引擎，在字符解析上有着比较出色的表现，欠缺之处在于异常调试上。由于传统意义的前端模板引擎已经变得不再流行，所以 laytpl 后续可能会进行重写，目前方向暂时还没有想好，预计会在layui比较稳定后开始实施。"></a>laytpl 是 JavaScript 模板引擎，在字符解析上有着比较出色的表现，欠缺之处在于异常调试上。由于传统意义的前端模板引擎已经变得不再流行，<em>所以 laytpl 后续可能会进行重写</em>，目前方向暂时还没有想好，预计会在layui比较稳定后开始实施。</h6><h6 id="与一般的字符拼接不同的是，laytpl-的模板可与数据分离，集中把逻辑处理放在-View-层，提升代码可维护性，尤其是针对大量模板渲染的情况。"><a href="#与一般的字符拼接不同的是，laytpl-的模板可与数据分离，集中把逻辑处理放在-View-层，提升代码可维护性，尤其是针对大量模板渲染的情况。" class="headerlink" title="与一般的字符拼接不同的是，laytpl 的模板可与数据分离，集中把逻辑处理放在 View 层，提升代码可维护性，尤其是针对大量模板渲染的情况。"></a>与一般的字符拼接不同的是，laytpl 的模板可与数据分离，集中把逻辑处理放在 View 层，提升代码可维护性，尤其是针对大量模板渲染的情况。</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">layui.use(<span class="string">&#x27;laytpl&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> laytpl = layui.laytpl;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//直接解析字符</span></span><br><span class="line">  laytpl(<span class="string">&#x27;&#123;&#123; d.name &#125;&#125;是一位公猿&#x27;</span>).render(&#123;</span><br><span class="line">    name: <span class="string">&#x27;贤心&#x27;</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">string</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(string); <span class="comment">//贤心是一位公猿</span></span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//你也可以采用下述同步写法，将 render 方法的回调函数剔除，可直接返回渲染好的字符</span></span><br><span class="line">  <span class="keyword">var</span> string =  laytpl(<span class="string">&#x27;&#123;&#123; d.name &#125;&#125;是一位公猿&#x27;</span>).render(&#123;</span><br><span class="line">    name: <span class="string">&#x27;贤心&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(string);  <span class="comment">//贤心是一位公猿</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果模板较大，你也可以采用数据的写法，这样会比较直观一些</span></span><br><span class="line">  laytpl([</span><br><span class="line">    <span class="string">&#x27;&#123;&#123; d.name &#125;&#125;是一位公猿&#x27;</span></span><br><span class="line">    ,<span class="string">&#x27;其它字符 &#123;&#123; d.content &#125;&#125;  其它字符&#x27;</span></span><br><span class="line">  ].join(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">&#125;); *</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205223355.png"></p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   配置事务,依赖数据源 并将类中加@EnableTransactionManagement//开启事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">dataSourceTransactionManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager d=<span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        d.setDataSource(dataSource());</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h3><ul>
<li><p><strong>所标注的类下的所有方法具有事务，如果标注方法上只有这个方法具有事务,一般针对于方法指定不同的传播机制</strong></p>
</li>
<li><p><strong>readOnly</strong></p>
<ul>
<li><strong>true表示只读 false表示读写默认, 如果此业务方法只用于查询的话设置为只读型性能会提升</strong></li>
</ul>
</li>
<li><p><strong>rollbackFor表示什么时机的异常或情况下触发回滚事务 默认三种情况下会自动回滚</strong></p>
<ul>
<li><strong>error 错误</strong></li>
<li><strong>runtimeException运行时异常</strong></li>
<li><strong>执行sql语句时错误时</strong></li>
</ul>
</li>
<li><p><strong>propagation事务传播机制</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**		Propagation.REQUIRED如果存在事务就支持当前事务,否则新建事务 默认值</span></span><br><span class="line"><span class="comment"> *      Propagation.REQUIRES_NEW创建一个事务覆盖原来的事务,不管原来存不存在</span></span><br><span class="line"><span class="comment"> *      Propagation.SUPPORTS如果存在事务,支持当前事务,否则按照非事务进行执行</span></span><br><span class="line"><span class="comment"> *      Propagation.NOT_SUPPORTED表示以非事务方式执行,如果存在事务,则挂起这个事务,按照非事务方法执行</span></span><br><span class="line"><span class="comment"> *      Propagation.MANDATORY如果不存在事务则抛出异常</span></span><br><span class="line"><span class="comment"> *      Propagation.NESTED如果存在一个事务,则创建这个事务的子事务</span></span><br><span class="line"><span class="comment"> *      Propagation.NEVER总以非事务方法执行,如果存在活动事务则抛出异常</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p><strong>isolation事务隔离等级</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *      Isolation.READ_COMMITTED提交读</span></span><br><span class="line"><span class="comment"> *      Isolation.READ_UNCOMMITTED未提交读</span></span><br><span class="line"><span class="comment"> *      Isolation.REPEATABLE_READ可重复读</span></span><br><span class="line"><span class="comment"> *      Isolation.SERIALIZABLE串行读写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="springmvc"><a href="#springmvc" class="headerlink" title="springmvc"></a>springmvc</h1></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205223356.png"></p>
<h3 id="DispatcheServlet"><a href="#DispatcheServlet" class="headerlink" title="DispatcheServlet"></a>DispatcheServlet</h3><ul>
<li><strong>一个请求匹配前端控制器DispatcheServlet在web.xml中所配置映射路径, /代表根路径下的一切请求</strong></li>
<li><strong>DispatcheServlet接受到请求后,将根据请求信息交给处理器映射器(HandlerMapping)</strong></li>
<li><strong>HandlerMapping根据用户的的url请求查找匹配该url的Handler,并返回以执行链</strong></li>
<li><strong>DispatcheServlet再次请求处理器适配器(HandlerAdapter)调用相应的handler进行处理并返回给ModelAndView给DispatcheServlet</strong></li>
<li><strong>DispatcheServlet将ModelAndView请求ViewReslover(视图解析器)解析,返回具体的view</strong></li>
<li><strong>DispatcheServlet对View进行渲染(将数据填充视图中)</strong></li>
<li><strong>将页面响应给用户</strong></li>
</ul>
<p><strong>流程 用户发送请求到DispatcheServlet,委托其它组件进行真正的处理,从一组HandlerMapping中找handler,前端处理器通过处理器适配器包装后执行Handler对象,Handler处理完业务逻辑，返回ModelAndView对象，其中view是视图名称，不是真正的视图对象,如果是逻辑路径,则通过视图解析器解析成物理路径,前端控制器根据模型数据和视图对象，进行视图渲染,渲染成html页面响应给用户客户端</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring MVC servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            开启注解版的注入 因为配置类是基于注解的</span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.springframework.web.context.support.AnnotationConfigWebApplicationContext<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.ax.config.WebConfig<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">     当启动容器时候加载配置	   </span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此处可以可以配置成*.do，对应struts的后缀习惯 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * handlerMapping处理器映射器 找到对相应的处理器handler  <span class="doctag">@RequestMapping</span>所标标注的方法</span></span><br><span class="line"><span class="comment"> * HandlerAdapter处理器适配器 包装(request请求对象的参数)数据之后执行handler 返回ModelAndView</span></span><br><span class="line"><span class="comment"> * 如果view是逻辑路径会通过视图解析器解析,然后进行渲染成html页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;org.ax.controller&quot;)</span><span class="comment">//包扫描器,扫描包下的类所标注的spring的注解</span></span><br><span class="line"><span class="meta">@EnableCaching</span><span class="comment">//开启springmvc的缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//配置内部资源视图解析器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InternalResourceViewResolver <span class="title">viewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InternalResourceViewResolver i=<span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">        i.setPrefix(<span class="string">&quot;/WEB-INF/page/&quot;</span>);</span><br><span class="line">        i.setSuffix(<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">//配置springmvc中的缓存,来缓存requsetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConcurrentMapCacheManager <span class="title">concurrentMapCacheManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ConcurrentMapCacheManager c=<span class="keyword">new</span> ConcurrentMapCacheManager();</span><br><span class="line">        List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;userList&quot;</span>);</span><br><span class="line">        c.setCacheNames(list);<span class="comment">//缓存的名称</span></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="springmvc注解"><a href="#springmvc注解" class="headerlink" title="springmvc注解"></a>springmvc注解</h2><ul>
<li>@Controller将控制层注入到springmvc</li>
<li>RequestMapping 路径映射<ul>
<li>path或value映射的地址</li>
<li>method 请求方式</li>
<li>headers 请求头信息</li>
<li>produces设置字符编码</li>
</ul>
</li>
<li>GetMapping相当于 get方式的RequestMapping </li>
<li>PostMapping相当于 Post方式的RequestMapping </li>
<li>ResponseBody响应数据，一般用于ajax,不会对ModelAndView进行处理<ul>
<li>相当于传统servlet中的Print Writer对象,返回值就相当于print方法的参数()</li>
<li>print方法<ul>
<li>参数只能是字符串,由转化器会把pojo对象转成json格式的字符串</li>
</ul>
</li>
</ul>
</li>
<li>redirect表示为重定向:请求对象会消失，会忽略视图解析</li>
<li>forward表示为转发:因为会把第一次的请求进行了转发，会保存请求对对象会忽略视图解析</li>
</ul>
<h3 id="自定义消息信息转发器"><a href="#自定义消息信息转发器" class="headerlink" title="自定义消息信息转发器"></a>自定义消息信息转发器</h3><h6 id="由于springmvc默认配置是jackJson的使用jackJson的可以不用配置-自定配置如下"><a href="#由于springmvc默认配置是jackJson的使用jackJson的可以不用配置-自定配置如下" class="headerlink" title="由于springmvc默认配置是jackJson的使用jackJson的可以不用配置,自定配置如下"></a>由于springmvc默认配置是jackJson的使用jackJson的可以不用配置,自定配置如下</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>    <span class="comment">//Jackson配置方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MappingJackson2HttpMessageConverter <span class="title">jackson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MappingJackson2HttpMessageConverter jackson2HttpMessageConverter = <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line">        jackson2HttpMessageConverter.setDefaultCharset(Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        JavaTimeModule timeModule = <span class="keyword">new</span> JavaTimeModule();</span><br><span class="line"><span class="comment">//        配置时间格式</span></span><br><span class="line">        timeModule.addSerializer(LocalDateTime.class, <span class="keyword">new</span> LocalDateTimeSerializer(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>)));</span><br><span class="line">        timeModule.addSerializer(LocalDate.class, <span class="keyword">new</span> LocalDateSerializer(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>)));</span><br><span class="line">        objectMapper.registerModule(timeModule);</span><br><span class="line">        StringHttpMessageConverter s=<span class="keyword">new</span> StringHttpMessageConverter();</span><br><span class="line">        <span class="comment">//设置字符转化器</span></span><br><span class="line">        s.setDefaultCharset(Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        jackson2HttpMessageConverter.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jackson2HttpMessageConverter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h6 id="阿里的FastJson"><a href="#阿里的FastJson" class="headerlink" title="阿里的FastJson"></a>阿里的FastJson</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Bean</span> <span class="comment">//配置阿里的fastJson数据格式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FastJsonHttpMessageConverter <span class="title">fastJson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.需要定义一个convert转换消息的对象;</span></span><br><span class="line">        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line"><span class="comment">//        fastJsonHttpMessageConverter.setDefaultCharset(Charset.forName(&quot;utf-8&quot;));//json字符编码</span></span><br><span class="line">        <span class="comment">//2.添加fastJson的配置信息，比如：是否要格式化返回的json数据;</span></span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line"><span class="comment">//        fastJsonConfig.setCharset(Charset.forName(&quot;utf-8&quot;));</span></span><br><span class="line">        fastJsonConfig.setDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>);</span><br><span class="line">        <span class="comment">//3处理中文乱码问题</span></span><br><span class="line">        List&lt;MediaType&gt; fastMediaTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        fastMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">        <span class="comment">//4.在convert中添加配置信息.</span></span><br><span class="line">        fastJsonHttpMessageConverter.setSupportedMediaTypes(fastMediaTypes);</span><br><span class="line">        fastJsonHttpMessageConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fastJsonHttpMessageConverter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h6 id="重新定义转化器格式重写WebMvcConfigurer接口下的configureMessageConverters"><a href="#重新定义转化器格式重写WebMvcConfigurer接口下的configureMessageConverters" class="headerlink" title="重新定义转化器格式重写WebMvcConfigurer接口下的configureMessageConverters"></a>重新定义转化器格式重写WebMvcConfigurer接口下的configureMessageConverters</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//add添加消息转化器</span></span><br><span class="line"><span class="comment">//        converters.add(jackson());</span></span><br><span class="line">        converters.add(fastJson());<span class="comment">//阿里jsonhttp消息转换器</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="日期格式扩点"><a href="#日期格式扩点" class="headerlink" title="日期格式扩点"></a>日期格式扩点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&#x27;T&#x27;HH:mm&quot;)</span> <span class="comment">//同步方式流入流出,是为了解析表单数据的（form/data)数据。</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm&quot;)</span> <span class="comment">//ajax异步方式流入流出日期歌格式进行转换</span></span><br></pre></td></tr></table></figure>
<h2 id="spring缓存机制"><a href="#spring缓存机制" class="headerlink" title="spring缓存机制"></a>spring缓存机制</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span><span class="comment">//配置springmvc中的缓存,来缓存requsetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConcurrentMapCacheManager <span class="title">concurrentMapCacheManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConcurrentMapCacheManager c=<span class="keyword">new</span> ConcurrentMapCacheManager();</span><br><span class="line">    List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;userList&quot;</span>);<span class="comment">//缓存的map</span></span><br><span class="line">    c.setCacheNames(list);<span class="comment">//缓存的名称</span></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">在配置类中标注<span class="meta">@EnableCaching</span><span class="comment">//开启spring的缓存</span></span><br></pre></td></tr></table></figure>
<ul>
<li>@Cacheable( cacheNames=”缓存的名字”)： 加在方法上<ul>
<li>在执行该方法之前，先检查缓存中是否有这条记录，如果有，则直接返回缓存中的记录，不执行该方法，若该缓存中没有存储该条记录，则执行该方法，将该方法的返回值存入该缓存中，以便于下一次的查找；</li>
</ul>
</li>
<li>@CacheEvict( cacheNames = “缓存名字”，allEntries = true) : 加在方法上 （allEntries: 该缓存中的所有记录）<ul>
<li>将该缓存下的所有记录都清空</li>
</ul>
</li>
<li>@CachePut( cacheNames=”缓存名字”)：加在方法上<ul>
<li>总是会执行该方法，每次都把返回结果更新进该缓存中</li>
</ul>
</li>
</ul>
<h6 id="从3-1开始，Spring引入了对Cache的支持。其使用方法和原理都类似于Spring对事务管理的支持。Spring-Cache是作用在方法上的，其核心思想是这样的：当我们在调用一个缓存方法时会把该方法参数和返回结果作为一个键值对存放在缓存中，等到下次利用同样的参数来调用该方法时将不再执行该方法，而是直接从缓存中获取结果进行返回。所以在使用Spring-Cache的时候我们要保证我们缓存的方法对于相同的方法参数要有相同的返回结果。"><a href="#从3-1开始，Spring引入了对Cache的支持。其使用方法和原理都类似于Spring对事务管理的支持。Spring-Cache是作用在方法上的，其核心思想是这样的：当我们在调用一个缓存方法时会把该方法参数和返回结果作为一个键值对存放在缓存中，等到下次利用同样的参数来调用该方法时将不再执行该方法，而是直接从缓存中获取结果进行返回。所以在使用Spring-Cache的时候我们要保证我们缓存的方法对于相同的方法参数要有相同的返回结果。" class="headerlink" title="从3.1开始，Spring引入了对Cache的支持。其使用方法和原理都类似于Spring对事务管理的支持。Spring Cache是作用在方法上的，其核心思想是这样的：当我们在调用一个缓存方法时会把该方法参数和返回结果作为一个键值对存放在缓存中，等到下次利用同样的参数来调用该方法时将不再执行该方法，而是直接从缓存中获取结果进行返回。所以在使用Spring Cache的时候我们要保证我们缓存的方法对于相同的方法参数要有相同的返回结果。"></a>从3.1开始，Spring引入了对Cache的支持。其使用方法和原理都类似于Spring对事务管理的支持。Spring Cache是作用在方法上的，其核心思想是这样的：当我们在调用一个缓存方法时会把该方法参数和返回结果作为一个键值对存放在缓存中，等到下次利用同样的参数来调用该方法时将不再执行该方法，而是直接从缓存中获取结果进行返回。所以在使用Spring Cache的时候我们要保证我们缓存的方法对于相同的方法参数要有相同的返回结果。</h6><h6 id="spring还为我们提供了一个root对象可以用来生成key。通过该root对象我们可以获取到以下信息。"><a href="#spring还为我们提供了一个root对象可以用来生成key。通过该root对象我们可以获取到以下信息。" class="headerlink" title="spring还为我们提供了一个root对象可以用来生成key。通过该root对象我们可以获取到以下信息。"></a>spring还为我们提供了一个root对象可以用来生成key。通过该root对象我们可以获取到以下信息。</h6><table>
<thead>
<tr>
<th>属性名称</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>methodName</td>
<td>当前方法名</td>
<td>#root.methodName</td>
</tr>
<tr>
<td>method</td>
<td>当前方法</td>
<td>#root.method.name</td>
</tr>
<tr>
<td>target</td>
<td>当前被调用的对象</td>
<td>#root.target</td>
</tr>
<tr>
<td>targetClass</td>
<td>当前被调用的对象的class</td>
<td>#root.targetClass</td>
</tr>
<tr>
<td>args</td>
<td>当前方法参数组成的数组</td>
<td>#root.args[0]</td>
</tr>
<tr>
<td>caches</td>
<td>当前被调用的方法使用的Cache</td>
<td>#root.caches[0].name</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/contact&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContactController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ContactMapper contactMapper;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/byId&quot;)</span></span><br><span class="line">    <span class="meta">@Cacheable(cacheNames = &quot;contact&quot;,key = &quot;#p0&quot;,condition = &quot;#id!=0&quot;)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cacheNames或者value：表示注解缓存区域的名称</span></span><br><span class="line"><span class="comment">     * key:区域中的键 支持SpringEL p0表示第一个参数...或者 用形参名执行指定</span></span><br><span class="line"><span class="comment">     * condition:当满足扫描条件进行缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contact <span class="title">byId</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了控制器&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> contactMapper.findByContactId(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="meta">@CachePut(value = &quot;contact&quot;,key = &quot;#id&quot;)</span><span class="comment">//每次都会执行方法，并将结果存入指定的缓存中,一般用于更新</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contact <span class="title">update</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        Contact contact=<span class="keyword">new</span> Contact();</span><br><span class="line">        contact.setName(<span class="string">&quot;哈哈&quot;</span>);</span><br><span class="line">        contact.setId(id);</span><br><span class="line">        <span class="keyword">return</span> contact;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清理缓存</span></span><br><span class="line">    <span class="meta">@CacheEvict(value=&quot;contact&quot;,allEntries = true)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * allEntries true 删除缓存所有</span></span><br><span class="line"><span class="comment">     *  false 删除缓存指定的key 默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;delete..&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><h2 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        spring整合mybatis ,所提供的sqlSessionFactoryBean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        依赖于事务jdbc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        业务层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--       数据格式json默认以经配置好了 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        测试jar--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        依赖底层最基础的jar--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>layui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.30.v20200611<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-配置Spring"><a href="#2-配置Spring" class="headerlink" title="2.配置Spring"></a>2.配置Spring</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;org.ax.service&quot;)</span><span class="comment">//将service扫描到容器</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;org.ax.mapper&quot;,sqlSessionFactoryRef = &quot;sqlSessionFactoryBean&quot;)</span><span class="comment">//将mapper映射器纳入容器供service调用,</span></span><br><span class="line"><span class="comment">//依赖于sqlSessionFactoryBean 默认bean的id是它,通过MapperFactoryBean创建mapper映射器,当执行这个mapper接口的方法是,通过代理默认得到这个</span></span><br><span class="line"><span class="comment">//方法的全限定名称,去找相应的标签进行执行,他的功能就是定位标签的位置</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span><span class="comment">//开启事务管理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//配置数据源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HikariDataSource dataSource=<span class="keyword">new</span> HikariDataSource();</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mvcmybatis?serverTimezone=UTC&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//创建mybatis配置类</span></span><br><span class="line">    <span class="keyword">public</span> org.apache.ibatis.session.<span class="function">Configuration <span class="title">configuration</span><span class="params">()</span></span>&#123;</span><br><span class="line">        org.apache.ibatis.session.Configuration c=<span class="keyword">new</span> org.apache.ibatis.session.Configuration();</span><br><span class="line">        c.setUseGeneratedKeys(<span class="keyword">true</span>);</span><br><span class="line">        c.addMappers(<span class="string">&quot;org.ax.mapper&quot;</span>);</span><br><span class="line">        c.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">        c.setAutoMappingBehavior(AutoMappingBehavior.FULL);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//加载mybatis配置和映射文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSessionFactoryBean s=<span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        s.setConfiguration(configuration());</span><br><span class="line">        s.setTypeAliasesPackage(<span class="string">&quot;org.ax.pojo&quot;</span>);</span><br><span class="line">        s.setDataSource(dataSource());</span><br><span class="line">        s.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">&quot;classpath:mapper/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//配置事务管理器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">dataSourceTransactionManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager d=<span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        d.setDataSource(dataSource());</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-配置springmvc"><a href="#3-配置springmvc" class="headerlink" title="3.配置springmvc"></a>3.配置springmvc</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//这个是spring的配置类</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span><span class="comment">//开启springmvc的配置</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;org.ax.controller&quot;)</span><span class="comment">//扫描控制器</span></span><br><span class="line"><span class="meta">@EnableCaching</span><span class="comment">//开启spring提供的缓存,来缓存处理器(handler)</span></span><br><span class="line"><span class="meta">@Import(AfterNotice.class)</span><span class="comment">//将通知类纳入容器</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span><span class="comment">//开启注解的注入通知</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">//配置视图解析器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InternalResourceViewResolver <span class="title">internalResourceViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InternalResourceViewResolver r=<span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">        r.setPrefix(<span class="string">&quot;/WEB-INF/page/&quot;</span>);</span><br><span class="line">        r.setSuffix(<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//添加虚拟路径和物理路径的映射</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//声明缓存区域</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConcurrentMapCacheManager <span class="title">concurrentMapCacheManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ConcurrentMapCacheManager c=<span class="keyword">new</span> ConcurrentMapCacheManager();</span><br><span class="line">        List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;roleList&quot;</span>);</span><br><span class="line">        c.setCacheNames(list);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        converters.add(jackson());</span></span><br><span class="line">        converters.add(fastJson());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>    <span class="comment">//Jackson配置方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MappingJackson2HttpMessageConverter <span class="title">jackson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MappingJackson2HttpMessageConverter jackson2HttpMessageConverter = <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line">        jackson2HttpMessageConverter.setDefaultCharset(Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        JavaTimeModule timeModule = <span class="keyword">new</span> JavaTimeModule();</span><br><span class="line"><span class="comment">//        配置时间格式</span></span><br><span class="line">        timeModule.addSerializer(LocalDateTime.class, <span class="keyword">new</span> LocalDateTimeSerializer(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>)));</span><br><span class="line">        timeModule.addSerializer(LocalDate.class, <span class="keyword">new</span> LocalDateSerializer(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>)));</span><br><span class="line">        objectMapper.registerModule(timeModule);</span><br><span class="line">        StringHttpMessageConverter s=<span class="keyword">new</span> StringHttpMessageConverter();</span><br><span class="line">        <span class="comment">//设置字符转化器</span></span><br><span class="line">        s.setDefaultCharset(Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        jackson2HttpMessageConverter.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jackson2HttpMessageConverter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//配置阿里的fastJson数据格式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FastJsonHttpMessageConverter <span class="title">fastJson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.需要定义一个convert转换消息的对象;</span></span><br><span class="line">        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line"><span class="comment">//        fastJsonHttpMessageConverter.setDefaultCharset(Charset.forName(&quot;utf-8&quot;));//json字符编码</span></span><br><span class="line">        <span class="comment">//2.添加fastJson的配置信息，比如：是否要格式化返回的json数据;</span></span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line"><span class="comment">//        fastJsonConfig.setCharset(Charset.forName(&quot;utf-8&quot;));</span></span><br><span class="line">        fastJsonConfig.setDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>);</span><br><span class="line">        <span class="comment">//3处理中文乱码问题</span></span><br><span class="line">        List&lt;MediaType&gt; fastMediaTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        fastMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">        <span class="comment">//4.在convert中添加配置信息.</span></span><br><span class="line">        fastJsonHttpMessageConverter.setSupportedMediaTypes(fastMediaTypes);</span><br><span class="line">        fastJsonHttpMessageConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fastJsonHttpMessageConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-加载spring和springmvc"><a href="#4-加载spring和springmvc" class="headerlink" title="4.加载spring和springmvc"></a>4.加载spring和springmvc</h2><h3 id="1-配置类方式去加载"><a href="#1-配置类方式去加载" class="headerlink" title="1.配置类方式去加载"></a>1.配置类方式去加载</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoaderSpringAndWebConfig</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;SpringConfig.class&#125;;<span class="comment">//加载载springConfig</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;WebMvcConfig.class&#125;;<span class="comment">//记载springMVcConfig</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;/&quot;</span>&#125;; <span class="comment">//dispatcheServlet处理的请求范围</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-web-xml方式去加载"><a href="#2-web-xml方式去加载" class="headerlink" title="2.web.xml方式去加载"></a>2.web.xml方式去加载</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      防止重复加载，出现多个对象 web容器启动时,默认会加载相对路径下的application.xml文件--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   接受带注解的类作为输入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.springframework.web.context.support.AnnotationConfigWebApplicationContext<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    指明配置配的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.ax.config.SpringConfig<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    加载springmvc容器--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.springframework.web.context.support.AnnotationConfigWebApplicationContext<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.ax.config.WebConfig<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>springboot配置</title>
    <url>/2021/01/25/springboot%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="中心思想"><a href="#中心思想" class="headerlink" title="中心思想"></a>中心思想</h2><h6 id="如果想有修改xxxAutoConfiguration中的值-查看这个自动配置类所绑定的XXXProperties这个类肯定和xxx前缀的配置文件斤进行绑定着-在配置文件中修改xxx前缀开始的-属性即可"><a href="#如果想有修改xxxAutoConfiguration中的值-查看这个自动配置类所绑定的XXXProperties这个类肯定和xxx前缀的配置文件斤进行绑定着-在配置文件中修改xxx前缀开始的-属性即可" class="headerlink" title="如果想有修改xxxAutoConfiguration中的值,查看这个自动配置类所绑定的XXXProperties这个类肯定和xxx前缀的配置文件斤进行绑定着,在配置文件中修改xxx前缀开始的.属性即可"></a>如果想有修改xxxAutoConfiguration中的值,查看这个自动配置类所绑定的XXXProperties这个类肯定和xxx前缀的配置文件斤进行绑定着,在配置文件中修改xxx前缀开始的.属性即可</h6><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(WebMvcProperties.class)</span> <span class="comment">//找到这个类,查看这个类绑定的前缀,在配置文件中修改以这个前缀下的属性即可,这个属性就是被类所绑定的属性</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.mvc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String staticPathPattern = <span class="string">&quot;/**&quot;</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加静态资源访问路径，一般用于放行资源，和controller无关</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure>
<h2 id="1-文件类型"><a href="#1-文件类型" class="headerlink" title="1.文件类型"></a>1.文件类型</h2><h3 id="1-1以前使用properties"><a href="#1-1以前使用properties" class="headerlink" title="1.1以前使用properties"></a>1.1以前使用properties</h3><h3 id="1-2现在使用yml"><a href="#1-2现在使用yml" class="headerlink" title="1.2现在使用yml"></a>1.2现在使用yml</h3><h4 id="1-2-1-简介"><a href="#1-2-1-简介" class="headerlink" title="1.2.1    简介"></a>1.2.1    简介</h4><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p>
<p>非常适合用来做以数据为中心的配置文件</p>
<h4 id="1-2-2、基本语法"><a href="#1-2-2、基本语法" class="headerlink" title="1.2.2、基本语法"></a>1.2.2、基本语法</h4><ul>
<li>key: value；kv之间有空格</li>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进不允许使用tab，只允许空格</li>
<li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li>
<li>‘#’表示注释</li>
<li>字符串无需加引号，如果要加，’’与””表示字符串内容 会被 转义/不转义</li>
</ul>
<h4 id="1-2-3-数据类型"><a href="#1-2-3-数据类型" class="headerlink" title="1.2.3 数据类型"></a>1.2.3 数据类型</h4><ul>
<li><p>字面量：单个的、不可再分的值。date、boolean、string、number、null <strong>k:v</strong></p>
</li>
<li><p>对象：键值对的集合。map、hash、set、object </p>
</li>
<li><pre><code class="yml">行内写法：  k: &#123;k1:v1,k2:v2,k3:v3&#125;
#或
k: 
  k1: v1
  k2: v2
  k3: v3
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 数组：一组按次序排列的值。array、list、queue</span><br><span class="line"></span><br><span class="line">* &#96;&#96;&#96;yaml</span><br><span class="line">  行内写法：  k: [v1,v2,v3]</span><br><span class="line">  #或者</span><br><span class="line">  k:</span><br><span class="line">   - v1</span><br><span class="line">   - v2</span><br><span class="line">   - v3</span><br></pre></td></tr></table></figure>
#### 1.2.4实例
</code></pre>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;testyml&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYml</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line">    <span class="keyword">private</span> String[] arr;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; listMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">testyml:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&#x27;我 \n 你&#x27;</span></span><br><span class="line"><span class="comment">#  &quot;&quot;不会转义 &#x27;&#x27;会转义</span></span><br><span class="line">  <span class="attr">pet:</span> &#123;<span class="attr">health:</span> <span class="number">26</span>,<span class="attr">petName:</span> <span class="string">李白</span>,<span class="attr">love:</span> <span class="number">26</span>&#125; <span class="comment">#给对象绑定值</span></span><br><span class="line">  <span class="attr">arr:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">李四</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">张三</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">王五</span></span><br><span class="line">  <span class="attr">listMap:</span></span><br><span class="line">    <span class="attr">a:</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">health:</span> <span class="number">26</span>,<span class="attr">petName:</span> <span class="string">李白1</span>,<span class="attr">love:</span> <span class="number">26</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">health:</span> <span class="number">46</span>,<span class="attr">petName:</span> <span class="string">李白2</span>,<span class="attr">love:</span> <span class="number">26</span>&#125;</span><br><span class="line">    <span class="attr">b:</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">health:</span> <span class="number">99</span>,<span class="attr">petName:</span> <span class="string">李白3</span>,<span class="attr">love:</span> <span class="number">26</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">health:</span> <span class="number">88</span>,<span class="attr">petName:</span> <span class="string">李白4</span>,<span class="attr">love:</span> <span class="number">26</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">petName:</span> <span class="string">李白6</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">45</span></span><br></pre></td></tr></table></figure>
<h2 id="2-配置文件提示"><a href="#2-配置文件提示" class="headerlink" title="2.配置文件提示"></a>2.配置文件提示</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            文件绑定类是,文件提示绑定类中的属性,方便开发,但是不要部署到容器 配置处理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    排除--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a><strong>Web开发</strong></h1><h2 id="1、SpringMVC自动配置概览"><a href="#1、SpringMVC自动配置概览" class="headerlink" title="1、SpringMVC自动配置概览"></a>1、SpringMVC自动配置概览</h2><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p>
<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
</li>
<li><ul>
<li>内容协商视图解析器和BeanName视图解析器</li>
</ul>
</li>
<li><p>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">later in this document</a>)).</p>
</li>
<li><ul>
<li>静态资源（包括webjars）</li>
</ul>
</li>
<li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p>
</li>
<li><ul>
<li>自动注册 <code>Converter，GenericConverter，Formatter </code></li>
</ul>
</li>
<li><p>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters">later in this document</a>).</p>
</li>
<li><ul>
<li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li>
</ul>
</li>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes">later in this document</a>).</p>
</li>
<li><ul>
<li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li>
</ul>
</li>
<li><p>Static <code>index.html</code> support.</p>
</li>
<li><ul>
<li>静态index.html 页支持</li>
</ul>
</li>
<li><p>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon">later in this document</a>).</p>
</li>
<li><ul>
<li>自定义 <code>Favicon</code>  </li>
</ul>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer">later in this document</a>).</p>
</li>
<li><ul>
<li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li>
</ul>
</li>
</ul>
<blockquote>
<p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p>
<p><strong>不用@EnableWebMvc注解。使用</strong> <strong><code>@Configuration</code></strong> <strong>+</strong> <strong><code>WebMvcConfigurer</code></strong> <strong>自定义规则</strong></p>
</blockquote>
<blockquote>
<p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p>
<p><strong>声明</strong> <strong><code>WebMvcRegistrations</code></strong> <strong>改变默认底层组件</strong></p>
</blockquote>
<blockquote>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p>
<p><strong>使用</strong> <strong><code>@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC</code></strong></p>
</blockquote>
<h2 id="2、简单功能分析"><a href="#2、简单功能分析" class="headerlink" title="2、简单功能分析"></a>2、简单功能分析</h2><h3 id="2-1、静态资源访问"><a href="#2-1、静态资源访问" class="headerlink" title="2.1、静态资源访问"></a>2.1、静态资源访问</h3><h4 id="1、静态资源目录"><a href="#1、静态资源目录" class="headerlink" title="1、静态资源目录"></a>1、静态资源目录</h4><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p>
<p>访问 ： 当前项目根路径/ + 静态资源名 </p>
<p>原理： 静态映射/**。</p>
<p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</p>
<p>改变默认的静态资源路径</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure>


<h4 id="2、静态资源访问前缀"><a href="#2、静态资源访问前缀" class="headerlink" title="2、静态资源访问前缀"></a>2、静态资源访问前缀</h4><p>默认无前缀</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure>
<p>当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找</p>
<h4 id="3、webjar"><a href="#3、webjar" class="headerlink" title="3、webjar"></a>3、webjar</h4><p>自动映射 /<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">webjars</a>/**</p>
<p><a href="https://www.webjars.org/">https://www.webjars.org/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.webjars&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jquery&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/<strong>jquery/3.5.1/jquery.js</strong></a>  后面地址要按照依赖里面的包路径</p>
<h4 id="4-欢迎页面"><a href="#4-欢迎页面" class="headerlink" title="4.欢迎页面"></a>4.欢迎页面</h4><ul>
<li><p>静态资源路径下 index.html</p>
<ul>
<li>如果给项目添加前缀会影响到index.html默认页面</li>
<li>可以配置静态资源路径</li>
<li>但是不可以配置静态资源的访问前缀,否则导致 index.html不能被默认访问</li>
</ul>
</li>
<li><pre><code class="yml">spring:
#  mvc:
#    static-path-pattern: /res/**   这个会导致welcome page功能失效

  resources:
    static-locations: [classpath:/haha/]
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* controller能处理&#x2F;index</span><br><span class="line"></span><br><span class="line">#### 5.自定义 favicon.ico</span><br><span class="line"></span><br><span class="line">favicon.ico放在静态资源目录下即可.</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;yml</span><br><span class="line">spring:</span><br><span class="line">#  mvc:</span><br><span class="line">#    static-path-pattern: &#x2F;res&#x2F;**   这个会导致 Favicon 功能失效</span><br></pre></td></tr></table></figure>
#### 6.静态资源配置原理</code></pre>
</li>
<li><p>springboot启动时默认会加载 xxxAutoConfiguration类(自动装配)</p>
</li>
<li><p>springMVC功能的自动配置类WebMvcAutoConfiguration,生效</p>
</li>
<li><p>```java<br>@Configuration(proxyBeanMethods = false)<br>@ConditionalOnWebApplication(type = Type.SERVLET)<br>@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })<br>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)<br>@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)<br>@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</p>
<pre><code>  ValidationAutoConfiguration.class &#125;)</code></pre>
<p>public class WebMvcAutoConfiguration {}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 给容器中配了什么呢</span><br><span class="line"></span><br><span class="line">* &#96;&#96;&#96;java</span><br><span class="line">  @Configuration(proxyBeanMethods &#x3D; false)</span><br><span class="line">  @Import(EnableWebMvcConfiguration.class)</span><br><span class="line">  @EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span><br><span class="line">  @Order(0)</span><br><span class="line">  public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer &#123;</span><br></pre></td></tr></table></figure></li>
<li><p>配置文件的相关的属性和xxx进行了绑定,WebMvcProPerties==spring.mvc,ResourceProperties==spring.resource,将这些类和配置文件进行绑定,修改配置文件即可,和被绑定的配置类的属性进行对应,如果以后想修改自动配置的值,可以修改配置类所绑定的配置文件即可</p>
</li>
</ul>
<h4 id="7-配置类中只有一个有参构造"><a href="#7-配置类中只有一个有参构造" class="headerlink" title="7.配置类中只有一个有参构造"></a>7.配置类中只有一个有参构造</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//有参构造器所有参数的值都会从容器中装配依赖</span></span><br><span class="line"><span class="comment">//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</span></span><br><span class="line"><span class="comment">//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</span></span><br><span class="line"><span class="comment">//ListableBeanFactory beanFactory Spring的beanFactory</span></span><br><span class="line"><span class="comment">//HttpMessageConverters 找到所有的HttpMessageConverters</span></span><br><span class="line"><span class="comment">//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========</span></span><br><span class="line"><span class="comment">//DispatcherServletPath  </span></span><br><span class="line"><span class="comment">//ServletRegistrationBean   给应用注册Servlet、Filter....</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebMvcAutoConfigurationAdapter</span><span class="params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">                ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">                ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">                ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span></span><br><span class="line"><span class="function"><span class="params">                ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">            <span class="keyword">this</span>.mvcProperties = mvcProperties;</span><br><span class="line">            <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">            <span class="keyword">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line">            <span class="keyword">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">            <span class="keyword">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line">            <span class="keyword">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h4 id="8-默认配置的原则"><a href="#8-默认配置的原则" class="headerlink" title="8.默认配置的原则"></a>8.默认配置的原则</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果设置了spring:</span></span><br><span class="line">  				<span class="comment">//resources:</span></span><br><span class="line">   				<span class="comment">//	 add-mappings: false #和这个addMappings属性进行绑定着,禁用所用静态资源</span></span><br><span class="line">    <span class="comment">//springboot就会将虚拟路径映射到物理路径上了,这就是为什么能访问/webjars/**,就可以访问到下的静态资源文件了</span></span><br><span class="line">   <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">      logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//静态资源缓存到浏览器的时间 </span></span><br><span class="line">   Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">   CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">   <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">      customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">                                           <span class="comment">//缓存到浏览器的时间</span></span><br><span class="line">            .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">   &#125;</span><br><span class="line">   String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">   <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">      customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">            .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">            .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span></span><br><span class="line"><span class="comment">     * /resources/, /static/, /public/].</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="string">禁用所有静态资源规则</span></span><br></pre></td></tr></table></figure>
<h4 id="9-欢迎页处理原则"><a href="#9-欢迎页处理原则" class="headerlink" title="9.欢迎页处理原则"></a>9.欢迎页处理原则</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HandlerMapping:处理器映射 ，保存了每一个Handler能处理的请求，XXXMapping(<span class="string">&quot;/path&quot;</span>)修饰的方法称为handler处理器</span><br><span class="line">    通过HanlderMapping得到用户请求路径找到相应的handler进行处理</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">      FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">   WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">         <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">         <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">   welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">   welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line">   <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">			ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class="line">        <span class="comment">//条件是 静态文件下是由有index.html页面,并且静态路径是/**,这就是为什么修改了</span></span><br><span class="line">        	<span class="comment">//spring.mvc.static-path-pattern=/res/** 默认页面不生效的原因</span></span><br><span class="line">		<span class="keyword">if</span> (welcomePage.isPresent() &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">			logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage.get());</span><br><span class="line">			setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//如果有模板存在 `/` 就代表 controller /index的请求</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">			logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">			setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>


<h3 id="3-请求映射处理"><a href="#3-请求映射处理" class="headerlink" title="3.请求映射处理"></a>3.请求映射处理</h3><h4 id="0-请求映射"><a href="#0-请求映射" class="headerlink" title="0.请求映射"></a>0.请求映射</h4><h4 id="1-使用rest使用于原理"><a href="#1-使用rest使用于原理" class="headerlink" title="1.使用rest使用于原理"></a>1.使用rest使用于原理</h4><ul>
<li><p>@XXXMapping</p>
</li>
<li><p>Rest风格支持(使用Http请求方式动词来表示对资源的操作)</p>
<ul>
<li><ul>
<li><em>以前：**/getUser</em>  <em>获取用户</em>   <em>/deleteUser</em> <em>删除用户</em>   <em>/editUser</em>  <em>修改用户</em>    <em>/saveUser</em> <em>保存用户</em></li>
<li><em>现在： /user</em>   <em>GET-**获取用户</em>   <em>DELETE-**删除用户</em>   <em>PUT-**修改用户</em>    <em>POST-**保存用户</em></li>
<li>核心Filter；HiddenHttpMethodFilter</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><p>用法： 表单method=post，隐藏域 _method=put</p>
</li>
<li><p>SpringBoot中手动开启</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    HttpServletRequest requestToUse = request;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    	1.判断表达提交方式是不是Post,</span></span><br><span class="line"><span class="comment">    	2.获取表单中_method参数的值</span></span><br><span class="line"><span class="comment">    	3.进行转化大写行时</span></span><br><span class="line"><span class="comment">    	4.判断请求方式是存在,</span></span><br><span class="line"><span class="comment">    	5.HttpMethodRequestWrapper对象是HttpServletRequest的实现</span></span><br><span class="line"><span class="comment">    	6.将从表单元素中获取的请求方式,放入这个构造方法中，进行构建成对象,最后返回,这就是包装模式</span></span><br><span class="line"><span class="comment">    	7.将请求方式覆盖掉,</span></span><br><span class="line"><span class="comment">    	目的由于form表单中没有PUT DELETE方式,为了解决此问题,将POST请求方法从请求中获取_method参数的值,</span></span><br><span class="line"><span class="comment">    	进行覆盖</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(<span class="string">&quot;javax.servlet.error.exception&quot;</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        String paramValue = request.getParameter(<span class="keyword">this</span>.methodParam);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">            String method = paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">            <span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class="line">                requestToUse = <span class="keyword">new</span> HiddenHttpMethodFilter.HttpMethodRequestWrapper(request, method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter((ServletRequest)requestToUse, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>扩展：如何把_method 这个名字换成我们自己喜欢的。</li>
</ul>
</li>
<li><pre><code class="java">@GetMapping(&quot;/user&quot;)
public String userGet()&#123;
    return &quot;Get user....&quot;;
&#125;
@PostMapping(&quot;/user&quot;)
public String userPost()&#123;
    return &quot;Post user....&quot;;
&#125;
@PutMapping(&quot;/user&quot;)
public String userPut()&#123;
    return &quot;Put user....&quot;;
&#125;
@DeleteMapping(&quot;/user&quot;)
public String userDelete()&#123;
    return &quot;Delete user....&quot;;
&#125;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##### 主要使用过滤器来进行二次修改 HiddenHttpMethodFilter,按需使用</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;Java</span><br><span class="line">	&#x2F;&#x2F;如果使用自带的过滤器必须开启让这个组件注入到容器中</span><br><span class="line">	@Bean</span><br><span class="line">	@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)&#x2F;&#x2F;如果容器中不存在这个类型的bean</span><br><span class="line">	@ConditionalOnProperty(prefix &#x3D; &quot;spring.mvc.hiddenmethod.filter&quot;, name &#x3D; &quot;enabled&quot;, matchIfMissing &#x3D; false)&#x2F;&#x2F;将spring.mvc.hiddenmethod.filter.enabled&#x3D; true设置为true开启使用使用过滤器 默认值false</span><br><span class="line">	public OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() &#123;</span><br><span class="line">		return new OrderedHiddenHttpMethodFilter();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">自定义</span><br><span class="line">@Bean &#x2F;&#x2F;使用自己配置的组件,自己配置获取请求参数k,来获取值</span><br><span class="line">public HiddenHttpMethodFilter hiddenHttpMethodFilter()&#123;</span><br><span class="line">    HiddenHttpMethodFilter h&#x3D;new HiddenHttpMethodFilter();</span><br><span class="line">    h.setMethodParam(&quot;_m&quot;);</span><br><span class="line">    return h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="2-result风格"><a href="#2-result风格" class="headerlink" title="2.result风格"></a>2.result风格</h4><ul>
<li>表达提交会带上name为_method的值,一般这是二次包装后的提交方式</li>
<li>请求过来HiddenHttpMethodFiler拦截<ul>
<li>请求是否正常,并且是POST<ul>
<li>获取到_methods的值</li>
<li>兼容下请求,PUT DELETE PATCH</li>
<li>原生request(Post),包装模式requestWrapper重写了doMethod方法,返回值是传入值</li>
<li>多滤器链放行了是否用wrapper以后的方法调用getMethod时调用requestWrapper的.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="rest使用客户端工具"><a href="#rest使用客户端工具" class="headerlink" title="rest使用客户端工具"></a>rest使用客户端工具</h5><p>​    如PostMan直接发送PUT DELETE PATCH,无需使用filter</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>   <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure>
<h4 id="3-映射原理"><a href="#3-映射原理" class="headerlink" title="3.映射原理"></a>3.映射原理</h4><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205224145.png">SpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-》doDispatch（）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServletRequest processedRequest = request;</span><br><span class="line">        HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">            Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                processedRequest = checkMultipart(request);</span><br><span class="line">                multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 找到当前请求使用哪个Handler（Controller的方法）处理</span></span><br><span class="line">                mappedHandler = getHandler(processedRequest);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//HandlerMapping：处理器映射。/xxx-&gt;&gt;xxxx</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205224151.png"></p>
<p><strong>RequestMappingHandlerMapping</strong>：保存了所有@RequestMapping 和handler的映射规则。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205224142.png"></p>
<p>所有的请求和请求映射的处理器都放在HandlerMapping中</p>
<ul>
<li>springboot自动配置欢迎页面使用的处理器映射是WeIcomePageHandlerMapping 访问/ 会从这个处理器映射找到对应的handler,这个handler返回的视图就是forward:/index.html</li>
<li>springboot自动装配了默认的RequestMappingHandlerMapping</li>
<li>请求进来,挨个从一组HandlerMapping中找到对应的handler进行处理</li>
<li>我们也可以自定义处理器映射，往容器中放入我们自定以的HandlerMapping</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//帮所有的HandlerMapping放到这个handlerMappings集合里,循环着个集合，从这个集合中的HandlerMapping找到相应的handler</span></span><br><span class="line">            <span class="keyword">for</span> (HandlerMapping mapping : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line">                HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line">                <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> handler;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//筛选的底层</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> HandlerMethod <span class="title">lookupHandlerMethod</span><span class="params">(String lookupPath, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		List&lt;Match&gt; matches = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取这个请求地址是这个的handler,不排除多个</span></span><br><span class="line">		List&lt;T&gt; directPathMatches = <span class="keyword">this</span>.mappingRegistry.getMappingsByUrl(lookupPath);</span><br><span class="line">		<span class="keyword">if</span> (directPathMatches != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//放到matches中</span></span><br><span class="line">			addMatchingMappings(directPathMatches, matches, request);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (matches.isEmpty()) &#123;</span><br><span class="line">			<span class="comment">// No choice but to go through all mappings...</span></span><br><span class="line">			addMatchingMappings(<span class="keyword">this</span>.mappingRegistry.getMappings().keySet(), matches, request);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!matches.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//默认使用第一个处理器</span></span><br><span class="line">			Match bestMatch = matches.get(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span> (matches.size() &gt; <span class="number">1</span>) &#123; <span class="comment">//如果有多个将进行判断</span></span><br><span class="line">				Comparator&lt;Match&gt; comparator = <span class="keyword">new</span> MatchComparator(getMappingComparator(request));</span><br><span class="line">				matches.sort(comparator);</span><br><span class="line">				bestMatch = matches.get(<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">					logger.trace(matches.size() + <span class="string">&quot; matching mappings: &quot;</span> + matches);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class="line">					<span class="keyword">return</span> PREFLIGHT_AMBIGUOUS_MATCH;</span><br><span class="line">				&#125;</span><br><span class="line">				Match secondBestMatch = matches.get(<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//如果这个请求(包含请求方式)能匹配到handler多个handler进行处理,将会包异常</span></span><br><span class="line">                <span class="comment">//进行比较</span></span><br><span class="line">				<span class="keyword">if</span> (comparator.compare(bestMatch, secondBestMatch) == <span class="number">0</span>) &#123;</span><br><span class="line">					Method m1 = bestMatch.handlerMethod.getMethod();</span><br><span class="line">					Method m2 = secondBestMatch.handlerMethod.getMethod();</span><br><span class="line">					String uri = request.getRequestURI();</span><br><span class="line">                    <span class="comment">//springmvc要求同样的请求同样的请求方法,不能有多方法同时能处理</span></span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">							<span class="string">&quot;Ambiguous handler methods mapped for &#x27;&quot;</span> + uri + <span class="string">&quot;&#x27;: &#123;&quot;</span> + m1 + <span class="string">&quot;, &quot;</span> + m2 + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			request.setAttribute(BEST_MATCHING_HANDLER_ATTRIBUTE, bestMatch.handlerMethod);</span><br><span class="line">			handleMatch(bestMatch.mapping, lookupPath, request);</span><br><span class="line">			<span class="keyword">return</span> bestMatch.handlerMethod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> handleNoMatch(<span class="keyword">this</span>.mappingRegistry.getMappings().keySet(), lookupPath, request);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-普通参数与基本注解"><a href="#3-普通参数与基本注解" class="headerlink" title="3.普通参数与基本注解"></a>3.普通参数与基本注解</h2><h3 id="1-1、注解："><a href="#1-1、注解：" class="headerlink" title="1.1、注解："></a>1.1、注解：</h3><p>@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  car/2/owner/zhangsan</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        map.put(&quot;id&quot;,id);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;,name);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;pv&quot;,pv);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;userAgent&quot;,userAgent);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;headers&quot;,header);</span></span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;inters&quot;</span>,inters);</span><br><span class="line">        map.put(<span class="string">&quot;params&quot;</span>,params);</span><br><span class="line">        map.put(<span class="string">&quot;_ga&quot;</span>,_ga);</span><br><span class="line">        System.out.println(cookie.getName()+<span class="string">&quot;===&gt;&quot;</span>+cookie.getValue());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">postMethod</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;content&quot;</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、语法： 请求路径：/cars/sell;low=34;brand=byd,audi,yd</span></span><br><span class="line">    <span class="comment">//2、SpringBoot默认是禁用了矩阵变量的功能</span></span><br><span class="line">    <span class="comment">//      手动开启：原理。对于路径的处理。UrlPathHelper进行解析。</span></span><br><span class="line">    <span class="comment">//              removeSemicolonContent（移除分号内容）支持矩阵变量的</span></span><br><span class="line">    <span class="comment">//3、矩阵变量必须有url路径变量才能被解析</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">carsSell</span><span class="params">(<span class="meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@PathVariable(&quot;path&quot;)</span> String path)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;low&quot;</span>,low);</span><br><span class="line">        map.put(<span class="string">&quot;brand&quot;</span>,brand);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /boss/1;age=20/2;age=10</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">boss</span><span class="params">(<span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;bossAge&quot;</span>,bossAge);</span><br><span class="line">        map.put(<span class="string">&quot;empAge&quot;</span>,empAge);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="05、Web开发"><a href="#05、Web开发" class="headerlink" title="05、Web开发"></a>05、Web开发</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205224148.png" alt="img"></p>
<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="1、SpringMVC自动配置概览-1"><a href="#1、SpringMVC自动配置概览-1" class="headerlink" title="1、SpringMVC自动配置概览"></a>1、SpringMVC自动配置概览</h1><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p>
<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
</li>
<li><ul>
<li>内容协商视图解析器和BeanName视图解析器</li>
</ul>
</li>
<li><p>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">later in this document</a>)).</p>
</li>
<li><ul>
<li>静态资源（包括webjars）</li>
</ul>
</li>
<li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p>
</li>
<li><ul>
<li>自动注册 <code>Converter，GenericConverter，Formatter </code></li>
</ul>
</li>
<li><p>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters">later in this document</a>).</p>
</li>
<li><ul>
<li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li>
</ul>
</li>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes">later in this document</a>).</p>
</li>
<li><ul>
<li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li>
</ul>
</li>
<li><p>Static <code>index.html</code> support.</p>
</li>
<li><ul>
<li>静态index.html 页支持</li>
</ul>
</li>
<li><p>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon">later in this document</a>).</p>
</li>
<li><ul>
<li>自定义 <code>Favicon</code>  </li>
</ul>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer">later in this document</a>).</p>
</li>
<li><ul>
<li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li>
</ul>
</li>
</ul>
<blockquote>
<p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p>
<p><strong>不用@EnableWebMvc注解。使用</strong> <strong><code>@Configuration</code></strong> <strong>+</strong> <strong><code>WebMvcConfigurer</code></strong> <strong>自定义规则</strong></p>
</blockquote>
<blockquote>
<p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p>
<p><strong>声明</strong> <strong><code>WebMvcRegistrations</code></strong> <strong>改变默认底层组件</strong></p>
</blockquote>
<blockquote>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p>
<p><strong>使用</strong> <strong><code>@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC</code></strong></p>
</blockquote>
<h1 id="2、简单功能分析-1"><a href="#2、简单功能分析-1" class="headerlink" title="2、简单功能分析"></a>2、简单功能分析</h1><h2 id="2-1、静态资源访问-1"><a href="#2-1、静态资源访问-1" class="headerlink" title="2.1、静态资源访问"></a>2.1、静态资源访问</h2><h3 id="1、静态资源目录-1"><a href="#1、静态资源目录-1" class="headerlink" title="1、静态资源目录"></a>1、静态资源目录</h3><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p>
<p>访问 ： 当前项目根路径/ + 静态资源名 </p>
<p>原理： 静态映射/**。</p>
<p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</p>
<p>改变默认的静态资源路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">    static-path-pattern: &#x2F;res&#x2F;**</span><br><span class="line"></span><br><span class="line">  resources:</span><br><span class="line">    static-locations: [classpath:&#x2F;haha&#x2F;]</span><br></pre></td></tr></table></figure>


<h3 id="2、静态资源访问前缀-1"><a href="#2、静态资源访问前缀-1" class="headerlink" title="2、静态资源访问前缀"></a>2、静态资源访问前缀</h3><p>默认无前缀</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">    static-path-pattern: &#x2F;res&#x2F;**</span><br></pre></td></tr></table></figure>
<p>当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找</p>
<h3 id="3、webjar-1"><a href="#3、webjar-1" class="headerlink" title="3、webjar"></a>3、webjar</h3><p>自动映射 /<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">webjars</a>/**</p>
<p><a href="https://www.webjars.org/">https://www.webjars.org/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.webjars&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jquery&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/<strong>jquery/3.5.1/jquery.js</strong></a>  后面地址要按照依赖里面的包路径</p>
<h2 id="2-2、欢迎页支持"><a href="#2-2、欢迎页支持" class="headerlink" title="2.2、欢迎页支持"></a>2.2、欢迎页支持</h2><ul>
<li><p>静态资源路径下  index.html</p>
</li>
<li><ul>
<li>可以配置静态资源路径</li>
<li>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">#  mvc:</span><br><span class="line">#    static-path-pattern: &#x2F;res&#x2F;**   这个会导致welcome page功能失效</span><br><span class="line"></span><br><span class="line">  resources:</span><br><span class="line">    static-locations: [classpath:&#x2F;haha&#x2F;]</span><br></pre></td></tr></table></figure>
<ul>
<li>controller能处理/index</li>
</ul>
<h2 id="2-3、自定义-Favicon"><a href="#2-3、自定义-Favicon" class="headerlink" title="2.3、自定义 Favicon"></a>2.3、自定义 <code>Favicon</code></h2><p>favicon.ico 放在静态资源目录下即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">#  mvc:</span><br><span class="line">#    static-path-pattern: &#x2F;res&#x2F;**   这个会导致 Favicon 功能失效</span><br></pre></td></tr></table></figure>




<h2 id="2-4、静态资源配置原理"><a href="#2-4、静态资源配置原理" class="headerlink" title="2.4、静态资源配置原理"></a>2.4、静态资源配置原理</h2><ul>
<li>SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）</li>
<li>SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration(proxyBeanMethods &#x3D; false)</span><br><span class="line">@ConditionalOnWebApplication(type &#x3D; Type.SERVLET)</span><br><span class="line">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="line">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="line">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="line">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="line">        ValidationAutoConfiguration.class &#125;)</span><br><span class="line">public class WebMvcAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>给容器中配了什么。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration(proxyBeanMethods &#x3D; false)</span><br><span class="line">@Import(EnableWebMvcConfiguration.class)</span><br><span class="line">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span><br><span class="line">@Order(0)</span><br><span class="line">public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>配置文件的相关属性和xxx进行了绑定。WebMvcProperties==<strong>spring.mvc</strong>、ResourceProperties==<strong>spring.resources</strong></li>
</ul>
<h4 id="1、配置类只有一个有参构造器"><a href="#1、配置类只有一个有参构造器" class="headerlink" title="1、配置类只有一个有参构造器"></a>1、配置类只有一个有参构造器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;有参构造器所有参数的值都会从容器中确定</span><br><span class="line">&#x2F;&#x2F;ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</span><br><span class="line">&#x2F;&#x2F;WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</span><br><span class="line">&#x2F;&#x2F;ListableBeanFactory beanFactory Spring的beanFactory</span><br><span class="line">&#x2F;&#x2F;HttpMessageConverters 找到所有的HttpMessageConverters</span><br><span class="line">&#x2F;&#x2F;ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F;DispatcherServletPath  </span><br><span class="line">&#x2F;&#x2F;ServletRegistrationBean   给应用注册Servlet、Filter....</span><br><span class="line">    public WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span><br><span class="line">                ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span><br><span class="line">                ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span><br><span class="line">                ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span><br><span class="line">                ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations) &#123;</span><br><span class="line">            this.resourceProperties &#x3D; resourceProperties;</span><br><span class="line">            this.mvcProperties &#x3D; mvcProperties;</span><br><span class="line">            this.beanFactory &#x3D; beanFactory;</span><br><span class="line">            this.messageConvertersProvider &#x3D; messageConvertersProvider;</span><br><span class="line">            this.resourceHandlerRegistrationCustomizer &#x3D; resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">            this.dispatcherServletPath &#x3D; dispatcherServletPath;</span><br><span class="line">            this.servletRegistrations &#x3D; servletRegistrations;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>




<h4 id="2、资源处理的默认规则"><a href="#2、资源处理的默认规则" class="headerlink" title="2、资源处理的默认规则"></a>2、资源处理的默认规则</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">        public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">            if (!this.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">                logger.debug(&quot;Default resource handling disabled&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            Duration cachePeriod &#x3D; this.resourceProperties.getCache().getPeriod();</span><br><span class="line">            CacheControl cacheControl &#x3D; this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">            &#x2F;&#x2F;webjars的规则</span><br><span class="line">            if (!registry.hasMappingForPattern(&quot;&#x2F;webjars&#x2F;**&quot;)) &#123;</span><br><span class="line">                customizeResourceHandlerRegistration(registry.addResourceHandler(&quot;&#x2F;webjars&#x2F;**&quot;)</span><br><span class="line">                        .addResourceLocations(&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F;&quot;)</span><br><span class="line">                        .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;</span><br><span class="line">            String staticPathPattern &#x3D; this.mvcProperties.getStaticPathPattern();</span><br><span class="line">            if (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">                customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                        .addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))</span><br><span class="line">                        .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">spring:</span><br><span class="line">#  mvc:</span><br><span class="line">#    static-path-pattern: &#x2F;res&#x2F;**</span><br><span class="line"></span><br><span class="line">  resources:</span><br><span class="line">    add-mappings: false   禁用所有静态资源规则</span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;spring.resources&quot;, ignoreUnknownFields &#x3D; false)</span><br><span class="line">public class ResourceProperties &#123;</span><br><span class="line"></span><br><span class="line">    private static final String[] CLASSPATH_RESOURCE_LOCATIONS &#x3D; &#123; &quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;,</span><br><span class="line">            &quot;classpath:&#x2F;resources&#x2F;&quot;, &quot;classpath:&#x2F;static&#x2F;&quot;, &quot;classpath:&#x2F;public&#x2F;&quot; &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Locations of static resources. Defaults to classpath:[&#x2F;META-INF&#x2F;resources&#x2F;,</span><br><span class="line">     * &#x2F;resources&#x2F;, &#x2F;static&#x2F;, &#x2F;public&#x2F;].</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String[] staticLocations &#x3D; CLASSPATH_RESOURCE_LOCATIONS;</span><br></pre></td></tr></table></figure>


<h4 id="3、欢迎页的处理规则"><a href="#3、欢迎页的处理规则" class="headerlink" title="3、欢迎页的处理规则"></a>3、欢迎页的处理规则</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。  </span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">    public WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext,</span><br><span class="line">            FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider) &#123;</span><br><span class="line">        WelcomePageHandlerMapping welcomePageHandlerMapping &#x3D; new WelcomePageHandlerMapping(</span><br><span class="line">                new TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">                this.mvcProperties.getStaticPathPattern());</span><br><span class="line">        welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">        welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line">        return welcomePageHandlerMapping;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">        ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class="line">    if (welcomePage.isPresent() &amp;&amp; &quot;&#x2F;**&quot;.equals(staticPathPattern)) &#123;</span><br><span class="line">        &#x2F;&#x2F;要用欢迎页功能，必须是&#x2F;**</span><br><span class="line">        logger.info(&quot;Adding welcome page: &quot; + welcomePage.get());</span><br><span class="line">        setRootViewName(&quot;forward:index.html&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">        &#x2F;&#x2F; 调用Controller  &#x2F;index</span><br><span class="line">        logger.info(&quot;Adding welcome page template: index&quot;);</span><br><span class="line">        setRootViewName(&quot;index&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4、favicon"><a href="#4、favicon" class="headerlink" title="4、favicon"></a>4、favicon</h4><h1 id="3、请求参数处理"><a href="#3、请求参数处理" class="headerlink" title="3、请求参数处理"></a>3、请求参数处理</h1><h2 id="0、请求映射"><a href="#0、请求映射" class="headerlink" title="0、请求映射"></a>0、请求映射</h2><h3 id="1、rest使用与原理"><a href="#1、rest使用与原理" class="headerlink" title="1、rest使用与原理"></a>1、rest使用与原理</h3><ul>
<li><p>@xxxMapping；</p>
</li>
<li><p>Rest风格支持（<em>使用<strong>HTTP</strong>请求方式动词来表示对资源的操作</em>）</p>
</li>
<li><ul>
<li><em>以前：**/getUser</em>  <em>获取用户</em>   <em>/deleteUser</em> <em>删除用户</em>   <em>/editUser</em>  <em>修改用户</em>    <em>/saveUser</em> <em>保存用户</em></li>
<li><em>现在： /user</em>   <em>GET-**获取用户</em>   <em>DELETE-**删除用户</em>   <em>PUT-**修改用户</em>    <em>POST-**保存用户</em></li>
<li>核心Filter；HiddenHttpMethodFilter</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>用法： 表单method=post，隐藏域 _method=put</li>
<li>SpringBoot中手动开启</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>扩展：如何把_method 这个名字换成我们自己喜欢的。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.GET)</span><br><span class="line">    public String getUser()&#123;</span><br><span class="line">        return &quot;GET-张三&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.POST)</span><br><span class="line">    public String saveUser()&#123;</span><br><span class="line">        return &quot;POST-张三&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.PUT)</span><br><span class="line">    public String putUser()&#123;</span><br><span class="line">        return &quot;PUT-张三&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.DELETE)</span><br><span class="line">    public String deleteUser()&#123;</span><br><span class="line">        return &quot;DELETE-张三&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span><br><span class="line">    @ConditionalOnProperty(prefix &#x3D; &quot;spring.mvc.hiddenmethod.filter&quot;, name &#x3D; &quot;enabled&quot;, matchIfMissing &#x3D; false)</span><br><span class="line">    public OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() &#123;</span><br><span class="line">        return new OrderedHiddenHttpMethodFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;自定义filter</span><br><span class="line">    @Bean</span><br><span class="line">    public HiddenHttpMethodFilter hiddenHttpMethodFilter()&#123;</span><br><span class="line">        HiddenHttpMethodFilter methodFilter &#x3D; new HiddenHttpMethodFilter();</span><br><span class="line">        methodFilter.setMethodParam(&quot;_m&quot;);</span><br><span class="line">        return methodFilter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Rest原理（表单提交要使用REST的时候）</p>
<ul>
<li><p>表单提交会带上<strong>_method=PUT</strong></p>
</li>
<li><p><strong>请求过来被</strong>HiddenHttpMethodFilter拦截</p>
</li>
<li><ul>
<li>请求是否正常，并且是POST</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>获取到<strong>_method</strong>的值。</li>
<li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li>
<li><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></li>
<li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用**</strong>requesWrapper的。**</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>**<br>**</p>
<p><strong>Rest使用客户端工具，</strong></p>
<ul>
<li>如PostMan直接发送Put、delete等方式请求，无需Filter。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">    hiddenmethod:</span><br><span class="line">      filter:</span><br><span class="line">        enabled: true   #开启页面表单的Rest功能</span><br></pre></td></tr></table></figure>
<h3 id="2、请求映射原理"><a href="#2、请求映射原理" class="headerlink" title="2、请求映射原理"></a>2、请求映射原理</h3><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205224145.png" alt="image.png"></p>
<p>SpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-》doDispatch（）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">        HttpServletRequest processedRequest &#x3D; request;</span><br><span class="line">        HandlerExecutionChain mappedHandler &#x3D; null;</span><br><span class="line">        boolean multipartRequestParsed &#x3D; false;</span><br><span class="line"></span><br><span class="line">        WebAsyncManager asyncManager &#x3D; WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            ModelAndView mv &#x3D; null;</span><br><span class="line">            Exception dispatchException &#x3D; null;</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                processedRequest &#x3D; checkMultipart(request);</span><br><span class="line">                multipartRequestParsed &#x3D; (processedRequest !&#x3D; request);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 找到当前请求使用哪个Handler（Controller的方法）处理</span><br><span class="line">                mappedHandler &#x3D; getHandler(processedRequest);</span><br><span class="line">                </span><br><span class="line">                &#x2F;&#x2F;HandlerMapping：处理器映射。&#x2F;xxx-&gt;&gt;xxxx</span><br></pre></td></tr></table></figure>
<p><img src="springboot%E9%85%8D%E7%BD%AE%5C1603181460034-ba25f3c0-9cfd-4432-8949-3d1dd88d8b12.png" alt="image.png"></p>
<p><strong>RequestMappingHandlerMapping</strong>：保存了所有@RequestMapping 和handler的映射规则。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205224151.png" alt="image.png"></p>
<p>所有的请求映射都在HandlerMapping中。</p>
<ul>
<li><p>SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 /能访问到index.html；</p>
</li>
<li><p>SpringBoot自动配置了默认 的 RequestMappingHandlerMapping</p>
</li>
<li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p>
</li>
<li><ul>
<li>如果有就找到这个请求对应的handler</li>
<li>如果没有就是下一个 HandlerMapping</li>
</ul>
</li>
<li><p>我们需要一些自定义的映射处理，我们也可以自己给容器中放<strong>HandlerMapping</strong>。自定义 <strong>HandlerMapping</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    if (this.handlerMappings !&#x3D; null) &#123;</span><br><span class="line">        for (HandlerMapping mapping : this.handlerMappings) &#123;</span><br><span class="line">            HandlerExecutionChain handler &#x3D; mapping.getHandler(request);</span><br><span class="line">            if (handler !&#x3D; null) &#123;</span><br><span class="line">                return handler;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-参数装配原理"><a href="#4-参数装配原理" class="headerlink" title="4.参数装配原理"></a>4.参数装配原理</h1><h2 id="1、普通参数与基本注解"><a href="#1、普通参数与基本注解" class="headerlink" title="1、普通参数与基本注解"></a>1、普通参数与基本注解</h2><h3 id="1-1、注解：-1"><a href="#1-1、注解：-1" class="headerlink" title="1.1、注解："></a>1.1、注解：</h3><p>@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class ParameterTestController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;  car&#x2F;2&#x2F;owner&#x2F;zhangsan</span><br><span class="line">    @GetMapping(&quot;&#x2F;car&#x2F;&#123;id&#125;&#x2F;owner&#x2F;&#123;username&#125;&quot;)</span><br><span class="line">    public Map&lt;String,Object&gt; getCar(@PathVariable(&quot;id&quot;) Integer id,</span><br><span class="line">                                     @PathVariable(&quot;username&quot;) String name,</span><br><span class="line">                                     @PathVariable Map&lt;String,String&gt; pv,</span><br><span class="line">                                     @RequestHeader(&quot;User-Agent&quot;) String userAgent,</span><br><span class="line">                                     @RequestHeader Map&lt;String,String&gt; header,</span><br><span class="line">                                     @RequestParam(&quot;age&quot;) Integer age,</span><br><span class="line">                                     @RequestParam(&quot;inters&quot;) List&lt;String&gt; inters,</span><br><span class="line">                                     @RequestParam Map&lt;String,String&gt; params,</span><br><span class="line">                                     @CookieValue(&quot;_ga&quot;) String _ga,</span><br><span class="line">                                     @CookieValue(&quot;_ga&quot;) Cookie cookie)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        map.put(&quot;id&quot;,id);</span><br><span class="line">&#x2F;&#x2F;        map.put(&quot;name&quot;,name);</span><br><span class="line">&#x2F;&#x2F;        map.put(&quot;pv&quot;,pv);</span><br><span class="line">&#x2F;&#x2F;        map.put(&quot;userAgent&quot;,userAgent);</span><br><span class="line">&#x2F;&#x2F;        map.put(&quot;headers&quot;,header);</span><br><span class="line">        map.put(&quot;age&quot;,age);</span><br><span class="line">        map.put(&quot;inters&quot;,inters);</span><br><span class="line">        map.put(&quot;params&quot;,params);</span><br><span class="line">        map.put(&quot;_ga&quot;,_ga);</span><br><span class="line">        System.out.println(cookie.getName()+&quot;&#x3D;&#x3D;&#x3D;&gt;&quot;+cookie.getValue());</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;&#x2F;save&quot;)</span><br><span class="line">    public Map postMethod(@RequestBody String content)&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;content&quot;,content);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;1、语法： 请求路径：&#x2F;cars&#x2F;sell;low&#x3D;34;brand&#x3D;byd,audi,yd</span><br><span class="line">    &#x2F;&#x2F;2、SpringBoot默认是禁用了矩阵变量的功能</span><br><span class="line">    &#x2F;&#x2F;      手动开启：原理。对于路径的处理。UrlPathHelper进行解析。</span><br><span class="line">    &#x2F;&#x2F;              removeSemicolonContent（移除分号内容）支持矩阵变量的</span><br><span class="line">    &#x2F;&#x2F;3、矩阵变量必须有url路径变量才能被解析</span><br><span class="line">    @GetMapping(&quot;&#x2F;cars&#x2F;&#123;path&#125;&quot;)</span><br><span class="line">    public Map carsSell(@MatrixVariable(&quot;low&quot;) Integer low,</span><br><span class="line">                        @MatrixVariable(&quot;brand&quot;) List&lt;String&gt; brand,</span><br><span class="line">                        @PathVariable(&quot;path&quot;) String path)&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(&quot;low&quot;,low);</span><br><span class="line">        map.put(&quot;brand&quot;,brand);</span><br><span class="line">        map.put(&quot;path&quot;,path);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; &#x2F;boss&#x2F;1;age&#x3D;20&#x2F;2;age&#x3D;10</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;boss&#x2F;&#123;bossId&#125;&#x2F;&#123;empId&#125;&quot;)</span><br><span class="line">    public Map boss(@MatrixVariable(value &#x3D; &quot;age&quot;,pathVar &#x3D; &quot;bossId&quot;) Integer bossAge,</span><br><span class="line">                    @MatrixVariable(value &#x3D; &quot;age&quot;,pathVar &#x3D; &quot;empId&quot;) Integer empAge)&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(&quot;bossAge&quot;,bossAge);</span><br><span class="line">        map.put(&quot;empAge&quot;,empAge);</span><br><span class="line">        return map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2、Servlet-API："><a href="#1-2、Servlet-API：" class="headerlink" title="1.2、Servlet API："></a>1.2、Servlet API：</h3><p>WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId\</p>
<p>以上部分交给<strong>ServletRequestMethodArgumentResolver</strong>  进行给参数解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; paramType = parameter.getParameterType();</span><br><span class="line">        <span class="keyword">return</span> (WebRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">                ServletRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">                MultipartRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">                HttpSession.class.isAssignableFrom(paramType) ||</span><br><span class="line">                (pushBuilder != <span class="keyword">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||</span><br><span class="line">                Principal.class.isAssignableFrom(paramType) ||</span><br><span class="line">                InputStream.class.isAssignableFrom(paramType) ||</span><br><span class="line">                Reader.class.isAssignableFrom(paramType) ||</span><br><span class="line">                HttpMethod.class == paramType ||</span><br><span class="line">                Locale.class == paramType ||</span><br><span class="line">                TimeZone.class == paramType ||</span><br><span class="line">                ZoneId.class == paramType);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-3-复杂参数"><a href="#1-3-复杂参数" class="headerlink" title="1.3 复杂参数"></a>1.3 复杂参数</h3><p><strong>Map</strong>、<strong>Model（map、model里面的数据会被放在request的请求域  request.setAttribute）、</strong>Errors/BindingResult、<strong>RedirectAttributes（ 重定向携带数据）</strong>、<strong>ServletResponse（response）</strong>、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map,  Model model, HttpServletRequest request 都是可以给request域中放数据，</span><br><span class="line">request.getAttribute();</span><br></pre></td></tr></table></figure>
<p><strong>Map、Model类型的参数</strong>，会返回 mavContainer.getModel（）；—&gt; BindingAwareModelMap 是Model 也是Map</p>
<p><strong>mavContainer</strong>.getModel(); 获取到值的</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205224140.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205224143.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205224146.png"></p>
<h3 id="1-4-自定义参数对象"><a href="#1-4-自定义参数对象" class="headerlink" title="1.4 自定义参数对象"></a>1.4 自定义参数对象</h3><h5 id="可以自动类型转换格式，可以级联封装"><a href="#可以自动类型转换格式，可以级联封装" class="headerlink" title="可以自动类型转换格式，可以级联封装"></a>可以自动类型转换格式，可以级联封装</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *     姓名： &lt;input name=&quot;userName&quot;/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     年龄： &lt;input name=&quot;age&quot;/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     生日： &lt;input name=&quot;birth&quot;/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     宠物姓名：&lt;input name=&quot;pet.name&quot;/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     宠物年龄：&lt;input name=&quot;pet.age&quot;/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result</span><br></pre></td></tr></table></figure>
<h2 id="2-POJO封装的过程"><a href="#2-POJO封装的过程" class="headerlink" title="2.POJO封装的过程"></a>2.POJO封装的过程</h2><ul>
<li><h5 id="ServletModelAttributeMethodProcessor"><a href="#ServletModelAttributeMethodProcessor" class="headerlink" title="ServletModelAttributeMethodProcessor"></a>ServletModelAttributeMethodProcessor</h5></li>
</ul>
<h2 id="3-参数处理原理"><a href="#3-参数处理原理" class="headerlink" title="3.参数处理原理"></a>3.参数处理原理</h2><ul>
<li>handelrMapping中找到能处理这个请求的handelr(Controller.method())</li>
<li>给当前的Handler找一个对应的handlerAdapter;默认使用requestMapping修饰的handler会使用<strong>requestMappingHandlerAdpater,调用参数解析器进行给形参赋值</strong></li>
<li>适配器执行目的方法并确定方法参数的每一个值</li>
</ul>
<h4 id="1-HandlerAdpater"><a href="#1-HandlerAdpater" class="headerlink" title="1.HandlerAdpater"></a>1.HandlerAdpater</h4><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205224139.png"></p>
<ul>
<li>0:支持方法上标注着RequestMapping的注解</li>
<li>1_支持函数编程的方法</li>
<li>xxxx</li>
</ul>
<h4 id="2-执行目标方法流程"><a href="#2-执行目标方法流程" class="headerlink" title="2.执行目标方法流程"></a>2.执行目标方法流程</h4><h5 id="主要研究的方法"><a href="#主要研究的方法" class="headerlink" title="主要研究的方法"></a>主要研究的方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line"><span class="comment">//DispatcherServlet -- doDispatch</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod); <span class="comment">//执行目标方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ServletInvocableHandlerMethod</span></span><br><span class="line">Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);<span class="comment">//将handler方法的值</span></span><br><span class="line"><span class="comment">//获取方法的参数值</span></span><br><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br></pre></td></tr></table></figure>
<h5 id="流行"><a href="#流行" class="headerlink" title="流行"></a>流行</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Actually invoke the handler.真正的执行，将HandlerAdpater进行执行</span></span><br><span class="line"><span class="comment">//DispatcherServlet -- doDispatch</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod);<span class="comment">//获取ModelAndView对象</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取方法参数值</span></span><br><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">			Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">//获取方法中的参数对象</span></span><br><span class="line">		MethodParameter[] parameters = getMethodParameters();</span><br><span class="line">    <span class="comment">//如果没参数直接返回,就不再找相应的参数解析器解析这个类型的参数了</span></span><br><span class="line">		<span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class="line">			<span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//创建一个长度为参数对象数量的数据组，用于将解析器解析参数的值放入此数组</span></span><br><span class="line">		Object[] args = <span class="keyword">new</span> Object[parameters.length];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">			MethodParameter parameter = parameters[i];</span><br><span class="line">			parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">			args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line">			<span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="comment">//判断是否有解析这个类型的参数解析器,如果没有接直接抛出异常</span></span><br><span class="line">			<span class="keyword">if</span> (!<span class="keyword">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				args[i] = <span class="keyword">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">				<span class="comment">// Leave stack trace for later, exception may actually be resolved and handled...</span></span><br><span class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">					String exMsg = ex.getMessage();</span><br><span class="line">					<span class="keyword">if</span> (exMsg != <span class="keyword">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class="line">						logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">throw</span> ex;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> args;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找到相应的参数解析器     </span></span><br><span class="line">HandlerMethodArgumentResolver resolver = getArgumentResolver(parameter);<span class="comment">// 找到相应的参数解析器</span></span><br><span class="line"><span class="comment">//底层就是循环判断那个参数解析器能解析这个类型的参数</span></span><br><span class="line">      	<span class="keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="keyword">this</span>.argumentResolvers) &#123;</span><br><span class="line">				<span class="keyword">if</span> (resolver.supportsParameter(parameter)) &#123;</span><br><span class="line">					result = resolver;</span><br><span class="line">					<span class="keyword">this</span>.argumentResolverCache.put(parameter, result);<span class="comment">//缓存</span></span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不同的参数解析器有不同的判断逻辑</span></span><br><span class="line">           	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">                   <span class="comment">//判断这个参数石佛标注了RequestParam这个注解...,如果标注，满足这个解析器，就交给这个解析器进行解析</span></span><br><span class="line"><span class="keyword">if</span> (parameter.hasParameterAnnotation(RequestParam这个注解,.class)) &#123;</span><br><span class="line">	<span class="keyword">if</span> (Map.class.isAssignableFrom(parameter.nestedIfOptional().getNestedParameterType())) &#123;</span><br><span class="line">		RequestParam requestParam = parameter.getParameterAnnotation(RequestParam.class);</span><br><span class="line">		<span class="keyword">return</span> (requestParam != <span class="keyword">null</span> &amp;&amp; StringUtils.hasText(requestParam.name()));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">		NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="comment">//得到参数信息</span></span><br><span class="line">	NamedValueInfo namedValueInfo = getNamedValueInfo(parameter);</span><br><span class="line">	MethodParameter nestedParameter = parameter.nestedIfOptional();</span><br><span class="line">	<span class="comment">//获取参数名称</span></span><br><span class="line">	Object resolvedName = resolveStringValue(namedValueInfo.name);</span><br><span class="line">	<span class="keyword">if</span> (resolvedName == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">				<span class="string">&quot;Specified name must not resolve to null: [&quot;</span> + namedValueInfo.name + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">       <span class="comment">//进行执行，底层就是根据resolvedName从请求对象中获取参数request.getParamValue(resolvedName)</span></span><br><span class="line">       Object arg = resolveName(resolvedName.toString(), nestedParameter, webRequest);</span><br><span class="line">          </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">resolveName</span><span class="params">(String name, MethodParameter parameter, NativeWebRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   HttpServletRequest servletRequest = request.getNativeRequest(HttpServletRequest.class);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (servletRequest != <span class="keyword">null</span>) &#123;</span><br><span class="line">      Object mpArg = MultipartResolutionDelegate.resolveMultipartArgument(name, parameter, servletRequest);</span><br><span class="line">      <span class="keyword">if</span> (mpArg != MultipartResolutionDelegate.UNRESOLVABLE) &#123;</span><br><span class="line">         <span class="keyword">return</span> mpArg;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Object arg = <span class="keyword">null</span>;</span><br><span class="line">   MultipartRequest multipartRequest = request.getNativeRequest(MultipartRequest.class);</span><br><span class="line">   <span class="keyword">if</span> (multipartRequest != <span class="keyword">null</span>) &#123;</span><br><span class="line">      List&lt;MultipartFile&gt; files = multipartRequest.getFiles(name);</span><br><span class="line">      <span class="keyword">if</span> (!files.isEmpty()) &#123;</span><br><span class="line">         arg = (files.size() == <span class="number">1</span> ? files.get(<span class="number">0</span>) : files);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (arg == <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">//根据参数名称获取参数值</span></span><br><span class="line">      String[] paramValues = request.getParameterValues(name);</span><br><span class="line">      <span class="keyword">if</span> (paramValues != <span class="keyword">null</span>) &#123;</span><br><span class="line">         arg = (paramValues.length == <span class="number">1</span> ? paramValues[<span class="number">0</span>] : paramValues);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-参数解析器-HandlerMethodArgumentResolver"><a href="#3-参数解析器-HandlerMethodArgumentResolver" class="headerlink" title="3.参数解析器-HandlerMethodArgumentResolver"></a>3.参数解析器-HandlerMethodArgumentResolver</h4><p>确定将要执行目标方法的每一个参数值是什么</p>
<p>SpringMvc目标方法能写多少种类型的参数,取决于参数解析器</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205224149.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205224138.png"></p>
<ul>
<li>当前解析器是否支持解析这种参数</li>
<li>支持就调用 resolveArgument</li>
</ul>
<h4 id="4-返回值处理器"><a href="#4-返回值处理器" class="headerlink" title="4.返回值处理器"></a>4.返回值处理器</h4><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210205224147.png"></p>
]]></content>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2021/02/20/nginx/</url>
    <content><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="1-什么是nginx"><a href="#1-什么是nginx" class="headerlink" title="1.什么是nginx"></a>1.什么是nginx</h2><p><strong>nginx是高性能的HTTP和反向代理服务器,处理高并发能力是十分强大的,能经受高负载的考验,有报告表示支持高达50000个并发连接数</strong></p>
<h2 id="2-正向代理"><a href="#2-正向代理" class="headerlink" title="2.正向代理"></a>2.正向代理</h2><p><strong>需要再客户端配置代理服务器进行指定网站访问</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220162156.png"></p>
<h2 id="3-反向代理"><a href="#3-反向代理" class="headerlink" title="3.反向代理"></a>3.反向代理</h2><p><strong>暴露的代理服务器地址,隐藏了真实服务器ip地址</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220162505.png"></p>
<h2 id="4-负载均衡"><a href="#4-负载均衡" class="headerlink" title="4.负载均衡"></a>4.负载均衡</h2><p><strong>增加服务器的数量,然后将请求分发到各个服务器上,将原来请求集中导弹个服务器上的情况为将请求分发到多个服务器上,将负载分发到不同的服务器,也就是我们所说的负载均衡</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220162836.png"></p>
<h2 id="5-动静分离"><a href="#5-动静分离" class="headerlink" title="5.动静分离"></a>5.动静分离</h2><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220162929.png"></p>
<h1 id="nginx的安装"><a href="#nginx的安装" class="headerlink" title="nginx的安装"></a>nginx的安装</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><h6 id="1-打开虚拟机-使用远程连接工具-宝塔-Ishell-Mobaxtream-连接linux系统"><a href="#1-打开虚拟机-使用远程连接工具-宝塔-Ishell-Mobaxtream-连接linux系统" class="headerlink" title="1.打开虚拟机,使用远程连接工具(宝塔,Ishell,Mobaxtream..)连接linux系统"></a>1.打开虚拟机,使用远程连接工具(宝塔,Ishell,Mobaxtream..)连接linux系统</h6><h6 id="2-到ngxin官方下载软件"><a href="#2-到ngxin官方下载软件" class="headerlink" title="2.到ngxin官方下载软件"></a>2.到ngxin官方下载软件</h6><p><strong><a href="http://nginx.org/">http://nginx.org/</a></strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220163358.png"></p>
<h2 id="2-、开始进行-nginx-安装"><a href="#2-、开始进行-nginx-安装" class="headerlink" title="2 、开始进行 nginx 安装"></a>2 、开始进行 nginx 安装</h2><p><strong><font color='red'>建议安装到linux,因为这样才能充分的发挥(原因Linux特有的Io多路复用机制)</font></strong></p>
<h2 id="1-安装nginx依赖的prce"><a href="#1-安装nginx依赖的prce" class="headerlink" title="1.安装nginx依赖的prce"></a>1.安装nginx依赖的prce</h2><h5 id="第一步-联网下载-pcre-压缩文件依赖"><a href="#第一步-联网下载-pcre-压缩文件依赖" class="headerlink" title="第一步 联网下载 pcre 压缩文件依赖"></a>第一步 联网下载 pcre 压缩文件依赖</h5><h6 id="wget-http-downloads-sourceforge-net-project-pcre-pcre-8-37-pcre-8-37-tar-gz"><a href="#wget-http-downloads-sourceforge-net-project-pcre-pcre-8-37-pcre-8-37-tar-gz" class="headerlink" title="wget http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz"></a>wget <a href="http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz">http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz</a></h6><h5 id="第二步-解压压缩文件"><a href="#第二步-解压压缩文件" class="headerlink" title="第二步 解压压缩文件"></a>第二步 解压压缩文件</h5><p><strong>安装openssl 、zlib 、 gcc依赖 yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel依赖</strong></p>
<h6 id="使用命令-tar-–xvf-pcre-8-37-tar-gz"><a href="#使用命令-tar-–xvf-pcre-8-37-tar-gz" class="headerlink" title="使用命令 tar –xvf pcre-8.37.tar.gz"></a><strong>使用命令 tar –xvf pcre-8.37.tar.gz</strong></h6><h5 id="第三步-configure-完成后，回到-pcre-目录下执行-make-，最后执行-make-install-pcre-config-–version-查看pcre的版本"><a href="#第三步-configure-完成后，回到-pcre-目录下执行-make-，最后执行-make-install-pcre-config-–version-查看pcre的版本" class="headerlink" title="第三步./configure 完成后，回到 pcre 目录下执行 make ，最后执行 make install,pcre-config –version 查看pcre的版本"></a>第三步./configure 完成后，回到 pcre 目录下执行 make ，最后执行 make install,pcre-config –version 查看pcre的版本</h5><h2 id="2-安装-nginx"><a href="#2-安装-nginx" class="headerlink" title="2.安装 nginx"></a>2.安装 nginx</h2><p><strong>使用命令解压(linux):tar -zxvf  xxx.tar.gz</strong></p>
<p><strong>./configure</strong></p>
<p><strong>make &amp;&amp; make install</strong></p>
<p><strong>进入目录 /usr/local/nginx/sbin/nginx 启动服务</strong></p>
<h2 id="3-防火墙问题"><a href="#3-防火墙问题" class="headerlink" title="3.防火墙问题"></a>3.防火墙问题</h2><ul>
<li><p>关闭防火墙 systemctl stop firewalld</p>
</li>
<li><p>开发端口号 firewall-cmd –add-port=80/tcp –permanent 记得重启防火墙哦~</p>
<ul>
<li>查看端口是否开发:firewall-cmd –list-all</li>
</ul>
</li>
</ul>
<h1 id="nginx常用的命令"><a href="#nginx常用的命令" class="headerlink" title="nginx常用的命令"></a>nginx常用的命令</h1><p><strong>进入到/usr/local/nginx/sbin目录中nginx的命令才会生效哦</strong></p>
<ul>
<li>查看版本 ./nginx -v</li>
<li>启动nginx ./nginx</li>
<li>停止nginx ./nginx -s stop</li>
<li>重载nginx ./nginx -s reload</li>
</ul>
<h1 id="nginx的配置文件"><a href="#nginx的配置文件" class="headerlink" title="nginx的配置文件"></a>nginx的配置文件</h1><h4 id="1-位置-usr-local-nginx-conf-nginx-conf"><a href="#1-位置-usr-local-nginx-conf-nginx-conf" class="headerlink" title="1.位置:/usr/local/nginx/conf/nginx.conf"></a><strong>1.位置:/usr/local/nginx/conf/nginx.conf</strong></h4><h4 id="2-配置文件中的内容"><a href="#2-配置文件中的内容" class="headerlink" title="2.配置文件中的内容"></a>2.配置文件中的内容</h4><h5 id="1-全局块：配置服务器整体运行的配置指令比如-worker-processes-1-处理并发数的配置"><a href="#1-全局块：配置服务器整体运行的配置指令比如-worker-processes-1-处理并发数的配置" class="headerlink" title="1.全局块：配置服务器整体运行的配置指令比如 worker_processes 1; 处理并发数的配置"></a>1.全局块：配置服务器整体运行的配置指令比如 worker_processes 1; 处理并发数的配置</h5><h5 id="2-events-块-：影响-Nginx-服务器与用户的网络连接比如-worker-connections-1024-支持的最大连接数为-1024"><a href="#2-events-块-：影响-Nginx-服务器与用户的网络连接比如-worker-connections-1024-支持的最大连接数为-1024" class="headerlink" title="2.events 块 ：影响 Nginx 服务器与用户的网络连接比如 worker_connections 1024; 支持的最大连接数为 1024"></a>2.events 块 ：影响 Nginx 服务器与用户的网络连接比如 worker_connections 1024; 支持的最大连接数为 1024</h5><h5 id="3-http-块-还包含两部分：http-全局块-server-块"><a href="#3-http-块-还包含两部分：http-全局块-server-块" class="headerlink" title="3.http 块:还包含两部分：http 全局块 server 块"></a>3.http 块:还包含两部分：http 全局块 server 块</h5><h1 id="Nginx-配置实例-反向代理-实例-1"><a href="#Nginx-配置实例-反向代理-实例-1" class="headerlink" title="Nginx 配置实例- 反向代理 实例 1"></a>Nginx 配置实例- 反向代理 实例 1</h1><h3 id="1-目的"><a href="#1-目的" class="headerlink" title="1.目的"></a>1.目的</h3><p>​    <strong>打开浏览器,在浏览地址栏输入地址 <a href="http://www.abilities.com,很据./System32/hosts%E6%96%87%E4%BB%B6%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%9A%84%E5%9F%9F%E5%90%8D%E6%89%80%E8%A7%A3%E6%9E%90%E7%9A%84Ip,%E8%AE%BF%E9%97%AE%E8%BF%99%E4%B8%AAip">www.abilities.com,很据./System32/hosts文件中配置的域名所解析的Ip,访问这个ip</a></strong></p>
<h3 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h3><p><strong>linux中安装服务tomcat通过 tar -xvf xxx解压,进入到服务的bin目录找到./startup.sh 启动 ,./shutdown.sh 关闭,由于在同局域不同ip中不要忘记<em>对外开发服务哦</em></strong></p>
<h3 id="3-访问流程"><a href="#3-访问流程" class="headerlink" title="3.访问流程"></a><strong>3.访问流程</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220224317.png"></p>
<h3 id="4-具体配置"><a href="#4-具体配置" class="headerlink" title="4.具体配置"></a>4.具体配置</h3><p><strong>第一步 在 在 windows 系统的 host 文件进行域名和 ip 对应关系的配置</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220224727.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.17.128	www.abilities.com</span><br></pre></td></tr></table></figure>
<p><strong>第二步 在 在 nginx 进行请求转发的配置（反向代理配置）</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220224908.png"></p>
<h1 id="Nginx-配置实例-反向代理实例-2"><a href="#Nginx-配置实例-反向代理实例-2" class="headerlink" title="Nginx 配置实例- 反向代理实例 2"></a><strong>Nginx 配置实例- 反向代理实例 2</strong></h1><h3 id="1-实现效果"><a href="#1-实现效果" class="headerlink" title="1.实现效果"></a>1.实现效果</h3><p>​    使用nginx反向代理,根据访问的路径跳转到不同端口的服务器,nginx监听的端口为9001;</p>
<p>​    访问 192.168.17.128:9001/edu/ 直接代理到127.0.0.1:8081</p>
<p>​    访问 192.168.17.128:9001/vod/ 直接代理到127.0.0.1:8082</p>
<h3 id="2-准备工作-1"><a href="#2-准备工作-1" class="headerlink" title="2.准备工作"></a>2.准备工作</h3><p>​    准备两个占用端口为8080 8081的tomcat服务器</p>
<p>​    部署不同的引用避免冲突,明确的区分</p>
<h3 id="3-具体配置"><a href="#3-具体配置" class="headerlink" title="3.具体配置"></a>3.具体配置</h3><p>​    找到nginx的配置文件,进行反向代理配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220225455.png"></p>
<p>​    开发9001 8080 8081端口</p>
<h3 id="4-test-result"><a href="#4-test-result" class="headerlink" title="4.test result"></a>4.test result</h3><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220225646.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220225708.png"></p>
<h1 id="Nginx-配置实例-负载均衡"><a href="#Nginx-配置实例-负载均衡" class="headerlink" title="Nginx 配置实例- 负载均衡"></a>Nginx 配置实例- 负载均衡</h1><h3 id="1-效果"><a href="#1-效果" class="headerlink" title="1.效果"></a>1.效果</h3><p>​    浏览器地址栏输入地址 <a href="http://192.168.17.129/edu/a.html">http://192.168.17.129/edu/a.html</a> ，负载均衡效果，平均 8080和 和 8081 端口中</p>
<h3 id="2-准备工作-2"><a href="#2-准备工作-2" class="headerlink" title="2.准备工作"></a>2.准备工作</h3><p>​    准备两台 tomcat 服务器，一台 8080 ，一台 8081</p>
<p>​    在两台 tomcat 里面 webapps 目录中，创建名称是 edu 文件夹，在 edu 文件夹中创建页面 a.html ，用于测试</p>
<h3 id="3-在-nginx-的配置文件中进行负载均衡的配置"><a href="#3-在-nginx-的配置文件中进行负载均衡的配置" class="headerlink" title="3.在 nginx 的配置文件中进行负载均衡的配置"></a>3.在 nginx 的配置文件中进行负载均衡的配置</h3><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220230026.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220230043.png"></p>
<h3 id="4-、nginx-分配服务器策略"><a href="#4-、nginx-分配服务器策略" class="headerlink" title="4 、nginx 分配服务器策略"></a>4 、nginx 分配服务器策略</h3><p><strong>第一种 轮询（默认）</strong><br>    每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 。 掉，能自动剔除</p>
<p><strong>第二种 weight</strong></p>
<p>​    weight 代表权重默认为 1, 权重越高被分配的客户端越多，<strong>设置</strong>直接往已有的目标服务地址后面添加 weight=num</p>
<p><strong>第三种 ip_hash</strong></p>
<p>​    每个请求按访问 ip 的 的 hash 结果分配，这样每个访客固定访问一个后端服务器</p>
<p><strong>第四种 fair</strong></p>
<p>​    按后端服务器的响应时间来分配请求，响应时间短的优先分配</p>
<h1 id="Nginx-配置实例-动静分离"><a href="#Nginx-配置实例-动静分离" class="headerlink" title="Nginx 配置实例- 动静分离"></a>Nginx 配置实例- 动静分离</h1><h3 id="1-什么是动静分离"><a href="#1-什么是动静分离" class="headerlink" title="1.什么是动静分离"></a>1.什么是动静分离</h3><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220230556.png"></p>
<p>​    <strong>通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏</strong><br><strong>览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源</strong><br><strong>设定一个过期时间，也就是说无需去 服务端验证，直接通过浏览器自身确认是否过期即可，</strong><br><strong>所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，</strong><br><strong>不建议使用 Expires 来缓存），我这里设置 3d ，表示在这 3 天之内访问这个 URL ，发送一</strong><br><strong>个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码 304 ，</strong><br><strong>如果有修改，则直接从服务器重新下载，返回状态码 200 。</strong></p>
<h3 id="2-准备工作-3"><a href="#2-准备工作-3" class="headerlink" title="2.准备工作"></a>2.准备工作</h3><p>​    <strong>在linux创建静态文件,用于将静态请求交给静态资源去匹配,充沛的发挥了服务器的长处</strong></p>
<h3 id="3-具体配置-1"><a href="#3-具体配置-1" class="headerlink" title="3.具体配置"></a>3.具体配置</h3><p>​    <strong>location /访问路径/{root /静态路径地址/;auoindex    on; #显示文件夹下的文件}</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220230911.png"></p>
<h1 id="Nginx-配置高可用的集群"><a href="#Nginx-配置高可用的集群" class="headerlink" title="Nginx 配置高可用的集群"></a>Nginx 配置高可用的集群</h1><h3 id="1-什么是服务器的高可用"><a href="#1-什么是服务器的高可用" class="headerlink" title="1.什么是服务器的高可用?"></a>1.什么是服务器的高可用?</h3><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220231323.png"></p>
<p><strong>准备</strong></p>
<p>​    两台ngxin服务器最好是不在同一台电脑上</p>
<p>​    需要keepalived 用虚拟ip绑定nginx的IP,</p>
<h3 id="2-配置高可用的准备工作"><a href="#2-配置高可用的准备工作" class="headerlink" title="2.配置高可用的准备工作"></a>2.配置高可用的准备工作</h3><p>​    需要两台服务器 192.168.17.128 和 192.168.17.129</p>
<p>​    安装 nginx keepalived</p>
<h3 id="3-install-keepalived-进行配置"><a href="#3-install-keepalived-进行配置" class="headerlink" title="3.install keepalived 进行配置"></a>3.install keepalived 进行配置</h3><ul>
<li><p>使用yum: yum install keepalived -y</p>
</li>
<li><p><strong>配置/etc/keepalived/keepalived.conf文件</strong></p>
<ul>
<li><p>```conf<br>! Configuration File for keepalived</p>
<p>global_defs {<br>notification_email {<br>  <a href="mailto:&#97;&#x63;&#x61;&#x73;&#115;&#x65;&#x6e;&#x40;&#x66;&#x69;&#x72;&#x65;&#119;&#x61;&#108;&#x6c;&#x2e;&#x6c;&#x6f;&#99;">&#97;&#x63;&#x61;&#x73;&#115;&#x65;&#x6e;&#x40;&#x66;&#x69;&#x72;&#x65;&#119;&#x61;&#108;&#x6c;&#x2e;&#x6c;&#x6f;&#99;</a><br>  <a href="mailto:&#102;&#x61;&#x69;&#108;&#111;&#118;&#101;&#114;&#x40;&#x66;&#105;&#x72;&#101;&#119;&#97;&#x6c;&#108;&#x2e;&#x6c;&#111;&#x63;">&#102;&#x61;&#x69;&#108;&#111;&#118;&#101;&#114;&#x40;&#x66;&#105;&#x72;&#101;&#119;&#97;&#x6c;&#108;&#x2e;&#x6c;&#111;&#x63;</a><br>  <a href="mailto:&#x73;&#x79;&#115;&#x61;&#100;&#109;&#x69;&#110;&#x40;&#102;&#105;&#114;&#x65;&#119;&#x61;&#108;&#x6c;&#46;&#108;&#x6f;&#x63;">&#x73;&#x79;&#115;&#x61;&#100;&#109;&#x69;&#110;&#x40;&#102;&#105;&#114;&#x65;&#119;&#x61;&#108;&#x6c;&#46;&#108;&#x6f;&#x63;</a><br>}<br>  notification_email_from <a href="mailto:&#65;&#108;&#101;&#x78;&#x61;&#x6e;&#100;&#114;&#101;&#x2e;&#67;&#x61;&#x73;&#115;&#101;&#x6e;&#x40;&#x66;&#105;&#x72;&#101;&#x77;&#x61;&#108;&#x6c;&#x2e;&#108;&#x6f;&#99;">&#65;&#108;&#101;&#x78;&#x61;&#x6e;&#100;&#114;&#101;&#x2e;&#67;&#x61;&#x73;&#115;&#101;&#x6e;&#x40;&#x66;&#105;&#x72;&#101;&#x77;&#x61;&#108;&#x6c;&#x2e;&#108;&#x6f;&#99;</a><br>  smtp_server 192.168.17.128<br>  smtp_connect_timeout 30<br>  router_id LVS_DEVEL<br>}<br>vrrp_script chk_http_port {<br>  script “/usr/local/src/nginx_check.sh”<br>  interval 2 #（检测脚本执行的间隔）<br>  weight 2<br>}<br>vrrp_instance VI_1 {<br>  state MASTER # 备份服务器上将 MASTER 改为 BACKUP<br>  interface ens33 //网卡<br>  virtual_router_id 51 # 主、备机的 virtual_router_id 必须相同<br>  priority 100 # 主、备机取不同的优先级，主机值较大，备份机值较小<br>  advert_int 1<br>  authentication {</p>
<pre><code>auth_type PASS
auth_pass 1111</code></pre>
<p>  }<br>  virtual_ipaddress {</p>
<pre><code>192.168.17.50 // VRRP H 虚拟地址</code></pre>
<p>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* **在&#x2F;usr&#x2F;local&#x2F;src中创建和配置nginx_check.sh表是keepalived用于通过这个文件来检查nginx是否宕机,如何宕机之后从将虚拟IP绑定到主备(backup)的nginx中,避免客户不友好**</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;sh</span><br><span class="line">    #!&#x2F;bin&#x2F;bash</span><br><span class="line">    A&#x3D;&#96;ps -C nginx –no-header |wc -l&#96;</span><br><span class="line">    if [ $A -eq 0 ];then</span><br><span class="line">    &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</span><br><span class="line">    sleep 2</span><br><span class="line">    if [ &#96;ps -C nginx --no-header |wc -l&#96; -eq 0 ];then</span><br><span class="line">    killall keepalived</span><br><span class="line">    fi</span><br><span class="line">    fi</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>启动各个的nginx keepalived:systemctl [start|stop]  keepalived.service</p>
</li>
</ul>
<h3 id="4-最终结果"><a href="#4-最终结果" class="headerlink" title="4.最终结果"></a>4.最终结果</h3><p>​    在浏览器地址栏输入 虚拟 ip 地址 192.168.17.50</p>
<p>​    ip a 查看Ip所绑定的虚拟ip</p>
<p>​    <img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220232935.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210220233344.png"></p>
<p>​    把主服务器（192.168.17.129 ）nginx 和 和 keepalived 停止，再输入 192.168.17.50</p>
<p>​    <img src="C:%5CUsers%5CDELL%5Cblog%5Csource%5C_posts%5Cnginx%5C20210220233637.png"></p>
<h1 id="nginx的原理"><a href="#nginx的原理" class="headerlink" title="nginx的原理"></a>nginx的原理</h1><h3 id="1-master和worker"><a href="#1-master和worker" class="headerlink" title="1.master和worker"></a>1.master和worker</h3><p>​    <strong>启动nginx之后,会开启两个进程,master和worker,master是管理员,主要分配任务,然后交给worker去处理</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210221090540.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210221090629.png"></p>
<h3 id="2-woker是工作的"><a href="#2-woker是工作的" class="headerlink" title="2.woker是工作的"></a><strong>2.woker是工作的</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/zhx666666/img/img/20210221093246.png"></p>
<h3 id="3-一个master和多个worker有什么好处"><a href="#3-一个master和多个worker有什么好处" class="headerlink" title="3.一个master和多个worker有什么好处"></a>3.一个master和多个worker有什么好处</h3><p>​    可以使用nginx -s reload 热部署 利用nginx进行热部署操作</p>
<p>​    每个worker是独立的进程,如果有其中的一个woker出现问题,其它独立的woker继续进行争抢,实现请求过程,不会造成服务器中断</p>
<h3 id="4-设置多少个worker合适"><a href="#4-设置多少个worker合适" class="headerlink" title="4.设置多少个worker合适"></a>4.设置多少个worker合适</h3><p>​    woker数和服务器的cpu数量等是最为适合的</p>
<h3 id="5-连接数worker-connection"><a href="#5-连接数worker-connection" class="headerlink" title="5.连接数worker_connection"></a>5.连接数worker_connection</h3><ul>
<li>发送请求占用了几个woker连接数<ul>
<li>静态资源2|动态资源4个,原因nginx不支持java应用,所以转发到其他服务中,这样一来一回就是两个</li>
</ul>
</li>
<li>nginx有一个master,有四个woker,每个woker支持最大的连接数1024,支持的最大并发数是多少？<ul>
<li>普通的静态访问最大并发数是:worker_connections*worker_processes/2(<strong><font color="green">除以2代表访问的nginx上的静态资源</font></strong>)</li>
<li>而如果是http作为反向代理的话,最大并发数量应该是worker_connections*worker_processes/4(<strong><font color="green">除以4代表访问的通过反向代理,代理到其它的服务上tomcat,一来一回又是2个连接</font></strong>)</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
</search>
